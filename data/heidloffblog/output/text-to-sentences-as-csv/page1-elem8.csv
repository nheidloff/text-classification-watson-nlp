page1-elem8,Running IBM Watson Text To Speech in Minikube.
page1-elem8,IBM Watson NLP (Natural Language Understanding) and Watson Speech containers can be run locally on-premises or Kubernetes and OpenShift clusters.
page1-elem8,Via REST and WebSockets APIs AI can easily be embedded in applications.
page1-elem8,This post describes how to run Watson Text To Speech locally in Minikube.
page1-elem8,To set some context check out the landing page IBM Watson Speech Libraries for Embed [https://www.ibm.com/products/watson-speech-embed-libraries].
page1-elem8,The Watson Text to Speech library is available as containers providing REST and WebSockets interfaces.
page1-elem8,While this offering is new the underlaying functionality has been used and optimized for a long time in IBM offerings like the IBM Cloud SaaS service for TTS and IBM Cloud Pak for Data.
page1-elem8,To try it a trial [https://www.ibm.com/account/reg/us-en/signup?formid=urx-51754] is available.
page1-elem8,The container images are stored in an IBM container registry that is accessed via an IBM Entitlement Key [https://www.ibm.com/account/reg/us-en/subscribe?formid=urx-51726].
page1-elem8,How to run TTS locally via Minikube
page1-elem8,My post Running IBM Watson Text to Speech in Containers [http://heidloff.net/article/running-ibm-watson-text-to-speech-in-containers/] explained how to run Watson TTS locally in Docker.
page1-elem8,The instructions below describe how to deploy Watson Text To Speech locally to Minikube via kubectl and yaml files.
page1-elem8,First you need to install Minikube for example via brew on MacOS.
page1-elem8,Next Minikube needs to be started with more memory and disk size than the Minikube defaults.
page1-elem8,I’ve used the settings below which is more than required but I wanted to leave space for other applications.
page1-elem8,Note that you also need to give your container runtime more resources.
page1-elem8,For example if you use Docker Desktop navigate to Preferences-Resources to do this.
page1-elem8,$ brew install minikube
page1-elem8,$ minikube start --cpus 12 --memory 16000 --disk-size 50g
page1-elem8,The namespace and secret need to be created.
page1-elem8,$ kubectl create namespace watson-demo
page1-elem8,$ kubectl config set-context --current --namespace=watson-demo
page1-elem8,$ kubectl create secret docker-registry \
page1-elem8,--docker-server=cp.icr.io \
page1-elem8,--docker-username=cp \
page1-elem8,--docker-password=<your IBM Entitlement Key> \
page1-elem8,-n watson-demo \
page1-elem8,ibm-entitlement-key
page1-elem8,Clone a repo with the Kubernetes yaml files to deploy Watson Text To Speech.
page1-elem8,$ git clone https://github.com/nheidloff/watson-embed-demos.git
page1-elem8,$ kubectl apply -f watson-embed-demos/minikube-text-to-speech/kubernetes/
page1-elem8,$ kubectl get pods --watch
page1-elem8,To use other speech models modify deployment.yaml [https://github.com/nheidloff/watson-embed-demos/blob/04c52d563039b10a86fdb25b8effe8ddf2d1e948/minikube-text-to-speech/kubernetes/deployment.yaml#L48-L68].
page1-elem8,- name: watson-tts-en-us-allisonv3voice
page1-elem8,image: cp.icr.io/cp/ai/watson-tts-en-us-allisonv3voice:1.0.0
page1-elem8,args:
page1-elem8,- sh
page1-elem8,- -c
page1-elem8,- cp model/* /models/pool2
page1-elem8,env:
page1-elem8,- name: ACCEPT_LICENSE
page1-elem8,value: "true"
page1-elem8,resources:
page1-elem8,limits:
page1-elem8,cpu: 1
page1-elem8,ephemeral-storage: 1Gi
page1-elem8,memory: 1Gi
page1-elem8,requests:
page1-elem8,cpu: 100m
page1-elem8,ephemeral-storage: 1Gi
page1-elem8,memory: 256Mi
page1-elem8,volumeMounts:
page1-elem8,- name: models
page1-elem8,mountPath: /models/pool2
page1-elem8,When you open the Kubernetes Dashboard (via ‘minikube dashboard’) you’ll see the deployed resources.
page1-elem8,The pod contains the runtime container and four init containers (two specific voice models a generic model and a utility container).
page1-elem8,To invoke Watson Text To Speech port forwarding can be used.
page1-elem8,$ kubectl port-forward svc/ibm-watson-tts-embed 1080
page1-elem8,The result of the curl command will be written to output.wav.
page1-elem8,$ curl "http://localhost:1080/text-to-speech/api/v1/synthesize" \
page1-elem8,--header "Content-Type: application/json" \
page1-elem8,--data '{"text":"Hello world"}' \
page1-elem8,--header "Accept: audio/wav" \
page1-elem8,--output output.wav
page1-elem8,To find out more about Watson Text To Speech and Watson for Embed in general check out these resources:
page1-elem8,* Watson Text To Speech Documentation [https://www.ibm.com/docs/en/watson-libraries?topic=watson-text-speech-library-embed-home]
page1-elem8,* Watson Text To Speech Model Catalog [https://www.ibm.com/docs/en/watson-libraries?topic=home-models-catalog]
page1-elem8,* Watson Text To Speech SaaS API docs [https://cloud.ibm.com/apidocs/text-to-speech]
page1-elem8,* Trial [https://www.ibm.com/account/reg/us-en/signup?formid=urx-51754]
page1-elem8,* Entitlement key [https://www.ibm.com/account/reg/us-en/subscribe?formid=urx-51726]
page1-elem8,* Automation for Watson NLP Deployments [https://github.com/IBM/watson-automation]
page1-elem8,* Running IBM Watson NLP locally in Containers [http://heidloff.net/article/running-ibm-watson-nlp-locally-in-containers/]
page1-elem8,* Running IBM Watson Speech to Text in Containers [http://heidloff.net/article/running-ibm-watson-speech-to-text-in-containers/]
page1-elem8,* Running IBM Watson Text to Speech in Containers [http://heidloff.net/article/running-ibm-watson-text-to-speech-in-containers/]
page1-elem8,The post Running IBM Watson Text To Speech in Minikube [http://heidloff.net/article/running-ibm-watson-text-to-speech-in-minikube/] appeared first on Niklas Heidloff [http://heidloff.net].