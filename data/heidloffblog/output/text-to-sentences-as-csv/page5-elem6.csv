page5-elem6,Initialization and Validation Webhooks in Operators.
page5-elem6,When developing custom Kubernetes resources static defaults and simple validations for resource properties can be defined in OpenAPI/JSON schemas.
page5-elem6,For more flexible scenarios webhooks can be used to initialize and validate resources with Go code.
page5-elem6,In the easiest case defaults and validations can be defined via Kubebuilder annotations directly in the Go code [https://github.com/IBM/operator-sample-go/blob/a449303076310bc99e3595c1904e6aeb6ee03b87/operator-application/api/v1beta1/application_types.go] of the custom resource definition for example:
page5-elem6,type ApplicationSpec struct {
page5-elem6,//+kubebuilder:default:="1.0.0"
page5-elem6,Version string `json:"versionomitempty"`
page5-elem6,//+kubebuilder:validation:Minimum=0
page5-elem6,//+kubebuilder:default:=1
page5-elem6,AmountPods int32 `json:"amountPods"`
page5-elem6,// +kubebuilder:default:="database"
page5-elem6,DatabaseName string `json:"databaseNameomitempty"`
page5-elem6,// +kubebuilder:default:="databaseNamespace"
page5-elem6,DatabaseNamespace string `json:"databaseNamespaceomitempty"`
page5-elem6,// +kubebuilder:default:="https://raw.githubusercontent.com/IBM/multi-tenancy/main/my.sql"
page5-elem6,SchemaUrl string `json:"schemaUrlomitempty"`
page5-elem6,Title string `json:"title`
page5-elem6,Read the Kubebuilder documentation [https://book.kubebuilder.io/reference/markers/crd-validation.html] for more details.
page5-elem6,Additionally webhooks can be implemented as part of Kubernetes operators which are executed before custom resources are created updated and deleted.
page5-elem6,The implementation of these webhooks is straight forward.
page5-elem6,The setup of the webhooks is a little bit more tricky.
page5-elem6,Check out my earlier blog Configuring Webhooks for Kubernetes Operators [http://heidloff.net/article/configuring-webhooks-kubernetes-operators/].
page5-elem6,In order to develop initialization and validation webhooks you have to implement the methods ‘Default()’ ‘ValidateCreate()’ ‘ValidateUpdate()’ and ‘ValidateDelete()’.
page5-elem6,Let’s take a look at a sample.
page5-elem6,The sample [https://github.com/IBM/operator-sample-go] is part of a GitHub repo that demonstrates various best practises for building operators.
page5-elem6,The Default() function sets the default of the title property read from a Go variable (code [https://github.com/IBM/operator-sample-go/blob/a449303076310bc99e3595c1904e6aeb6ee03b87/operator-application/api/v1beta1/application_webhook.go#L28-L33]).
page5-elem6,func (reconciler *Application) Default() {
page5-elem6,if reconciler.Spec.Title == "" {
page5-elem6,reconciler.Spec.Title = variables.DEFAULT_ANNOTATION_TITLE
page5-elem6,Here are some snippets [https://github.com/IBM/operator-sample-go/blob/a449303076310bc99e3595c1904e6aeb6ee03b87/operator-application/api/v1beta1/application_webhook.go#L38-L83] how to validate two properties.
page5-elem6,func (reconciler *Application) ValidateCreate() error {
page5-elem6,return reconciler.validate()
page5-elem6,func (reconciler *Application) ValidateUpdate(old runtime.Object) error {
page5-elem6,return reconciler.validate()
page5-elem6,func (reconciler *Application) validate() error {
page5-elem6,var allErrors field.ErrorList
page5-elem6,if err := reconciler.validateSchemaUrl(); err != nil {
page5-elem6,allErrors = append(allErrors err)
page5-elem6,if err := reconciler.validateName(); err != nil {
page5-elem6,allErrors = append(allErrors err)
page5-elem6,if len(allErrors) == 0 {
page5-elem6,return nil
page5-elem6,return apierrors.NewInvalid(
page5-elem6,schema.GroupKind{Group: GroupVersion.Group Kind: reconciler.Kind}
page5-elem6,reconciler.Name allErrors)
page5-elem6,func (reconciler *Application) validateSchemaUrl() *field.Error {
page5-elem6,if !strings.HasPrefix(reconciler.Spec.SchemaUrl "http") {
page5-elem6,return field.Invalid(field.NewPath("spec").Child("schemaUrl") reconciler.Name "must start with 'http'")
page5-elem6,return nil
page5-elem6,func (reconciler *Application) validateName() *field.Error {
page5-elem6,// Note: Names of Kubernetes objects can only have a length is 63 characters
page5-elem6,// Note: Since deployment name = application name + ‘-deployment-microservice' the name cannot have more than 35 characters
page5-elem6,if len(reconciler.ObjectMeta.Name) > validationutils.DNS1035LabelMaxLength-24 {
page5-elem6,return field.Invalid(field.NewPath("metadata").Child("name") reconciler.Name "must be no more than 35 characters")
page5-elem6,return nil
page5-elem6,To learn more read the Kubebuilder documentation [https://book.kubebuilder.io/cronjob-tutorial/webhook-implementation.html] and try the sample [https://github.com/IBM/operator-sample-go] operator which demonstrates defaulting/validation webhooks as well as many other operator patterns.
page5-elem6,The post Initialization and Validation Webhooks in Operators [http://heidloff.net/article/developing-initialization-validation-webhooks-kubernetes-operators/] appeared first on Niklas Heidloff [http://heidloff.net].