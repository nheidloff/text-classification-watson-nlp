page4-elem3,Scaling Applications automatically with Operators.
page4-elem3,The real power or Kubernetes operators are not day 1 tasks like the initial deployments but the automation of day 2 operations.
page4-elem3,This article describes a sample operator that scales up an application automatically based on the number of API requests.
page4-elem3,The complete source code from this article is available in the ibm/operator-sample-go repo [https://github.com/IBM/operator-sample-go].
page4-elem3,The repo includes operator samples that demonstrate patterns and best practises.
page4-elem3,It also includes another day 2 sample scenario: Automatically Archiving Data with Kubernetes Operators [http://heidloff.net/article/automatically-archiving-data-kubernetes-operators/].
page4-elem3,The sample contains the following components:
page4-elem3,* Prometheus: Stores metrics from various sources and provides query capabilities
page4-elem3,* Sample microservice: Provides a /hello endpoint which exposes a counter to Prometheus
page4-elem3,* Application operator (core): Deploys the microservice
page4-elem3,* Application operator’s CronJob: Separate container which scales up the number of pod instances based on the amount of /hello invocations
page4-elem3,To set up and configure Prometheus check our my previous article Exporting Metrics from Kubernetes Apps for Prometheus [http://heidloff.net/article/exporting-metrics-kubernetes-applications-prometheus/].
page4-elem3,Below I focus on the implementation of the auto-scaler.
page4-elem3,The microservice has been implemented with Quarkus.
page4-elem3,It uses Eclipse MicroProfile to track the number of invocations (see code [https://github.com/IBM/operator-sample-go/blob/f130dc768df6d9178f6395690f508f0840e0b5ef/simple-microservice/src/main/java/net/heidloff/GreetingResource.java]).
page4-elem3,import org.eclipse.microprofile.config.inject.ConfigProperty;
page4-elem3,import org.eclipse.microprofile.metrics.annotation.Counted;
page4-elem3,@Path("/hello")
page4-elem3,public class GreetingResource {
page4-elem3,@ConfigProperty(name = "greeting.message")
page4-elem3,String message;
page4-elem3,@GET
page4-elem3,@Produces(MediaType.TEXT_PLAIN)
page4-elem3,@Counted(name = "countHelloEndpointInvoked" description = "How often /hello has been invoked")
page4-elem3,public String hello() {
page4-elem3,return String.format("Hello %s" message);
page4-elem3,To allow Prometheus to scrape these metrics a ServiceMonitor [https://github.com/IBM/operator-sample-go/blob/f130dc768df6d9178f6395690f508f0840e0b5ef/simple-microservice/kubernetes/service-monitor.yaml] is used.
page4-elem3,apiVersion: monitoring.coreos.com/v1
page4-elem3,kind: ServiceMonitor
page4-elem3,metadata:
page4-elem3,labels:
page4-elem3,app: myapplication
page4-elem3,name: myapplication-metrics-monitor
page4-elem3,namespace: application-beta
page4-elem3,spec:
page4-elem3,endpoints:
page4-elem3,- path: /q/metrics
page4-elem3,selector:
page4-elem3,matchLabels:
page4-elem3,app: myapplication
page4-elem3,With the Prometheus user interface queries to this data can be done.
page4-elem3,To develop the auto-scaler a separate image/container is used.
page4-elem3,This container is an extension to the application controller.
page4-elem3,The application controller sets up a CronJob for the auto-scaler container so that it is run on a scheduled basis.
page4-elem3,The CronJob [https://github.com/IBM/operator-sample-go/blob/f130dc768df6d9178f6395690f508f0840e0b5ef/operator-application-scaler/kubernetes/cronjob.yaml] that is created by the controller looks like this.
page4-elem3,Note that the application name and namespace are passed in as parameter.
page4-elem3,apiVersion: batch/v1
page4-elem3,kind: CronJob
page4-elem3,metadata:
page4-elem3,name: application-scaler
page4-elem3,namespace: operator-application-system
page4-elem3,spec:
page4-elem3,schedule: "0 * * * *"
page4-elem3,jobTemplate:
page4-elem3,spec:
page4-elem3,template:
page4-elem3,spec:
page4-elem3,containers:
page4-elem3,- name: application-scale
page4-elem3,image: docker.io/nheidloff/operator-application-scaler:v1.0.2
page4-elem3,imagePullPolicy: IfNotPresent
page4-elem3,env:
page4-elem3,- name: APPLICATION_RESOURCE_NAME
page4-elem3,value: "application"
page4-elem3,- name: APPLICATION_RESOURCE_NAMESPACE
page4-elem3,value: "application-beta"
page4-elem3,restartPolicy: OnFailure
page4-elem3,The implementation [https://github.com/IBM/operator-sample-go/blob/f130dc768df6d9178f6395690f508f0840e0b5ef/operator-application-scaler/scaler/scaler.go] of the actual auto-scaler is trivial.
page4-elem3,I’ve used the Prometheus Go client library [https://github.com/prometheus/client_golang/].
page4-elem3,Note that this library is still considered experimental.
page4-elem3,Alternatively you can use the Prometheus HTTP API [https://prometheus.io/docs/prometheus/latest/querying/api/].
page4-elem3,prometheusAddress := "http://prometheus-operated.monitoring:9090"
page4-elem3,queryAmountHelloEndpointInvocations := "application_net_heidloff_GreetingResource_countHelloEndpointInvoked_total"
page4-elem3,client err := api.NewClient(api.Config{
page4-elem3,Address: prometheusAddress
page4-elem3,})
page4-elem3,if err != nil {
page4-elem3,os.Exit(1)
page4-elem3,v1api := v1.NewAPI(client)
page4-elem3,ctx cancel := context.WithTimeout(context.Background() 10*time.Second)
page4-elem3,defer cancel()
page4-elem3,result warnings err := v1api.Query(ctx queryAmountHelloEndpointInvocations time.Now())
page4-elem3,if err != nil {
page4-elem3,os.Exit(1)
page4-elem3,resultVector conversionSuccessful := (result).
page4-elem3,(model.Vector)
page4-elem3,if conversionSuccessful == true {
page4-elem3,if resultVector.Len() > 0 {
page4-elem3,firstElement := resultVector[0]
page4-elem3,if firstElement.Value > 5 {
page4-elem3,// Note: '5' is only used for demo purposes
page4-elem3,scaleUp()
page4-elem3,To learn more about operator patterns and best practices check out the repo operator-sample-go [https://github.com/IBM/operator-sample-go].
page4-elem3,The instructions how to run the auto-scaler demo are in the documentation [https://github.com/IBM/operator-sample-go/blob/f130dc768df6d9178f6395690f508f0840e0b5ef/operator-application-scaler/README.md].
page4-elem3,The post Scaling Applications automatically with Operators [http://heidloff.net/article/scaling-applications-automatically-operators/] appeared first on Niklas Heidloff [http://heidloff.net].