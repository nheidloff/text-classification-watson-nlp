page3-elem1,Handling of Versions of TechZone Toolkit Modules.
page3-elem1,With the TechZone Accelerator Toolkit IBM software open source projects and custom applications can easily be deployed to various clouds.
page3-elem1,This article explains how to ensure that the right versions of modules are deployed.
page3-elem1,In an earlier blog I introduced the toolkit: Introducing IBM’s Toolkit to handle Everything as Code [http://heidloff.net/article/introducing-ibms-toolkit-to-handle-everything-as-code/].
page3-elem1,The toolkit leverages Terrafrom and GitOps and is based on best practices based on IBM experiences in partner and clients projects.
page3-elem1,Solutions are defined via bill of materials (BOM) which contain lists of modules [https://modules.cloudnativetoolkit.dev/].
page3-elem1,In the following example [https://github.com/IBM/watson-automation/blob/main/roks-new-nlp/bom.yaml] an OpenShift cluster is created in the IBM Cloud which comes with Argo CD a GitOps repo Watson NLP and a sample application based on ubi.
page3-elem1,apiVersion: cloudnativetoolkit.dev/v1alpha1
page3-elem1,kind: BillOfMaterial
page3-elem1,metadata:
page3-elem1,name: cluster-with-watson-nlp
page3-elem1,spec:
page3-elem1,modules:
page3-elem1,- name: ibm-ocp-vpc
page3-elem1,- name: argocd-bootstrap
page3-elem1,- name: gitops-repo
page3-elem1,alias: gitops_repo
page3-elem1,- name: terraform-gitops-ubi
page3-elem1,alias: terraform_gitops_ubi
page3-elem1,- name: terraform-gitops-watson-nlp
page3-elem1,alias: terraform_gitops_watson_nlp
page3-elem1,If you don’t provide any version numbers in the BOMs the toolkit installs the latest versions.
page3-elem1,Modules can have dependencies which are defined in the module.yaml [https://github.com/cloud-native-toolkit/terraform-gitops-watson-nlp/blob/4c22e5bba2023602bdd8e4a1a1634b4d024ee937/module.yaml#L15] files.
page3-elem1,dependencies:
page3-elem1,- id: gitops
page3-elem1,refs:
page3-elem1,- source: github.com/cloud-native-toolkit/terraform-tools-gitops.git
page3-elem1,version: '>= 1.1.0'
page3-elem1,- id: namespace
page3-elem1,refs:
page3-elem1,- source: github.com/cloud-native-toolkit/terraform-gitops-namespace.git
page3-elem1,version: '>= 1.0.0'
page3-elem1,- id: setup_clis
page3-elem1,refs:
page3-elem1,- source: github.com/cloud-native-toolkit/terraform-util-clis.git
page3-elem1,version: '>= 1.0.0'
page3-elem1,As in other frameworks and programming languages like JavaScript Java Go etc. the best practise is to require certain versions of dependencies.
page3-elem1,Automatic updates of modules can easily break production applications.
page3-elem1,Before updating dependencies testing needs to be done.
page3-elem1,The only exception might be security fixes but even those need to be tested.
page3-elem1,Let’s take a look how this can be done with the TechZone Accelerator Toolkit.
page3-elem1,After you have run ‘iascable build …’ on BOM files which only include high level modules without version numbers like above you will find a second BOM file (shadow BOM) in the subdirectory ‘output/bom-name/bom.yaml’.
page3-elem1,These shadow BOM files contain not only the high level modules but a complete list of all modules including dependencies.
page3-elem1,They also include the latest version numbers.
page3-elem1,apiVersion: cloudnativetoolkit.dev/v1alpha1
page3-elem1,kind: BillOfMaterial
page3-elem1,metadata:
page3-elem1,name: cluster-with-watson-nlp
page3-elem1,spec:
page3-elem1,modules:
page3-elem1,- name: gitops-repo
page3-elem1,alias: gitops_repo
page3-elem1,version: v1.22.2
page3-elem1,- name: argocd-bootstrap
page3-elem1,alias: argocd-bootstrap
page3-elem1,version: v1.12.0
page3-elem1,- name: ibm-ocp-vpc
page3-elem1,alias: cluster
page3-elem1,version: v1.16.3
page3-elem1,- name: ibm-vpc
page3-elem1,alias: ibm-vpc
page3-elem1,version: v1.17.0
page3-elem1,- name: ibm-vpc-gateways
page3-elem1,alias: ibm-vpc-gateways
page3-elem1,version: v1.10.0
page3-elem1,- name: terraform-gitops-ubi
page3-elem1,alias: terraform_gitops_ubi
page3-elem1,version: v0.0.26
page3-elem1,- name: terraform-gitops-watson-nlp
page3-elem1,alias: terraform_gitops_watson_nlp
page3-elem1,version: v1.0.0
page3-elem1,- name: olm
page3-elem1,version: v1.3.5
page3-elem1,- name: sealed-secret-cert
page3-elem1,version: v1.0.1
page3-elem1,- name: ibm-resource-group
page3-elem1,alias: resource_group
page3-elem1,version: v3.3.5
page3-elem1,- name: ibm-object-storage
page3-elem1,alias: cos
page3-elem1,version: v4.1.0
page3-elem1,- name: ibm-vpc-subnets
page3-elem1,version: v1.14.0
page3-elem1,- name: gitops-namespace
page3-elem1,alias: namespace
page3-elem1,version: v1.14.0
page3-elem1,- name: util-clis
page3-elem1,version: v1.18.1
page3-elem1,To ‘pin’ the version numbers of modules for subsequent Terraform runs a best practise is to replace the original BOM file with the generated shadow BOM file.
page3-elem1,This approach is similar to JavaScript’s package-lock.json files and Golang’s go.sum files.
page3-elem1,To find out more about these capabilities check out the following resources:
page3-elem1,* Watson Automation Repo [https://github.com/IBM/watson-automation]
page3-elem1,* TechZone Accelerator Toolkit [https://operate.cloudnativetoolkit.dev/]
page3-elem1,* Watson NLP [https://www.ibm.com/docs/en/watson-libraries?topic=watson-natural-language-processing-library-embed-home]
page3-elem1,The post Handling of Versions of TechZone Toolkit Modules [http://heidloff.net/article/versioning-of-techzone-accelerator-toolkit-modules/] appeared first on Niklas Heidloff [http://heidloff.net].