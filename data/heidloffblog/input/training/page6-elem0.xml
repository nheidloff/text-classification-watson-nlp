<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"><channel><title>Page 20 â€“ Niklas Heidloff</title><atom:link href="http://heidloff.net/feed/?paged=20" rel="self" type="application/rss+xml"/><link>http://heidloff.net</link><description/><lastBuildDate>
	Fri, 25 Nov 2022 07:22:15 +0000	</lastBuildDate><language>en-US</language><sy:updatePeriod>
	hourly	</sy:updatePeriod><sy:updateFrequency>
	1	</sy:updateFrequency><generator>https://wordpress.org/?v=5.1.15</generator><site xmlns="com-wordpress:feed-additions:1">102773794</site><item><title>Training TensorFlow Object Detection Models</title><link>http://heidloff.net/article/tensorflow-object-detection-deep-learning</link><comments>http://heidloff.net/article/tensorflow-object-detection-deep-learning#respond</comments><pubDate>Mon, 17 Sep 2018 12:51:40 +0000</pubDate><dc:creator><![CDATA[Niklas Heidloff]]></dc:creator><category><![CDATA[Articles]]></category><guid isPermaLink="false">http://heidloff.net/?p=3090</guid><description><![CDATA[<p>TensorFlow Object Detection is a powerful technology to recognize different objects in images including their positions. The trained Object Detection models can be run on mobile and edge devices to execute predictions really fast. I&#8217;ve used this technology to build a demo where Anki Overdrive cars and obstacles are detected via an iOS app. When [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/tensorflow-object-detection-deep-learning">Training TensorFlow Object Detection Models</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></description><content:encoded><![CDATA[<p><a href="https://github.com/tensorflow/models/tree/master/research/object_detection" rel="noopener" target="_blank">TensorFlow Object Detection</a> is a powerful technology to recognize different objects in images including their positions. The trained Object Detection models can be run on mobile and edge devices to execute predictions really fast. I&#8217;ve used this technology to build a demo where Anki Overdrive cars and obstacles are detected via an iOS app. When obstacles are detected, the cars are stopped automatically.<span id="more-3090"></span></p>
<p>Check out the short <a href="https://youtu.be/i7qnAA33ZFo" rel="noopener" target="_blank">video</a> (only 2 mins) for a quick demo.</p>
<p>This picture shows the track with two cars and a phone and the iOS app which draws rectangles around the objects.</p>
<p><a href="http://heidloff.net/wp-content/uploads/2018/09/picture2-small.jpg"><img src="http://heidloff.net/wp-content/uploads/2018/09/picture2-small.jpg" alt="picture2-small" width="800" height="600" class="alignnone size-full wp-image-3089" srcset="http://heidloff.net/wp-content/uploads/2018/09/picture2-small.jpg 800w, http://heidloff.net/wp-content/uploads/2018/09/picture2-small-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2018/09/picture2-small-135x100.jpg 135w" sizes="(max-width: 800px) 100vw, 800px" /></a></p>
<p>I have <a href="https://github.com/nheidloff/object-detection-anki-overdrive-cars" rel="noopener" target="_blank">open sourced</a> the code on GitHub. The repo includes two parts: </p>
<ol>
<li>Trained deep learning model to recognize items on Anki Overdrive tracks with an iOS app</li>
<li>Documentation how to train TensorFlow Object Detection models</li>
</ol>
<p>The instructions in the <a href="https://github.com/nheidloff/object-detection-anki-overdrive-cars/blob/master/README.md" rel="noopener" target="_blank">README</a> are pretty detailed. Below is a quick overview of the main steps that you can follow to train models to detect your own objects.</p>
<p><strong>1) Development Environment Setup</strong></p>
<p>First you need to download the trained MobileNet model which is an optimized model for mobile devices. Rather than training a new model from scratch, transfer learning is used. Basically the last layer of the neural network is replaced with your own objects.</p>
<p>To make the <a href="https://github.com/nheidloff/object-detection-anki-overdrive-cars#1-development-environment-setup" rel="noopener" target="_blank">setup of the development environment</a> as simple as possible, Docker containers are provided.</p>
<p><strong>2) Labelling of Images</strong></p>
<p>While for Visual Recognition models only images and the names of the categories need to be provided, the <a href="https://github.com/nheidloff/object-detection-anki-overdrive-cars#2-labelling-of-images-and-creation-of-tfrecords" rel="noopener" target="_blank">labeling for Object Detection</a> is more sophisticated. In addition to the list of objects you also need to provide their positions. I&#8217;ve used <a href="https://github.com/tzutalin/labelImg" rel="noopener" target="_blank">labelImg</a> to create the labels and rectangles as shown in the screenshot.</p>
<p><a href="http://heidloff.net/wp-content/uploads/2018/09/labelimage2.jpg"><img src="http://heidloff.net/wp-content/uploads/2018/09/labelimage2.jpg" alt="labelimage2" width="800" height="511" class="alignnone size-full wp-image-3083" srcset="http://heidloff.net/wp-content/uploads/2018/09/labelimage2.jpg 800w, http://heidloff.net/wp-content/uploads/2018/09/labelimage2-300x192.jpg 300w" sizes="(max-width: 800px) 100vw, 800px" /></a></p>
<p>From what I&#8217;ve read these are some best practices how to create the training data:</p>
<ul>
<li>Take/get at least 50 pictures per object.</li>
<li>Use a rather small resolution, for example 640 x 480.</li>
<li>Use different sizes of your objects and different angles.</li>
<li>Use pictures that have multiple objects in them.</li>
<li>When marking the objects with labelImg, put the rectangles as closely as possible around the objects.</li>
</ul>
<p>The images and the annotations exported from the labelImg tool need to be <a href="https://github.com/nheidloff/object-detection-anki-overdrive-cars/blob/master/README.md#creation-of-tfrecords" rel="noopener" target="_blank">converted</a> into a certain format (TFRecords) which TensorFlow Object Detection expects.</p>
<p><strong>3) Training of the Model</strong></p>
<p>Trainings with just a few training steps can be run <a href="https://github.com/nheidloff/object-detection-anki-overdrive-cars#3-training-of-the-model" rel="noopener" target="_blank">locally</a>. This is useful, for example, if you want to test whether the code runs. When you can use a GPU, trainings with many steps should also be possible locally, but I haven&#8217;t tried it.</p>
<p>I&#8217;ve used <a href="https://www.ibm.com/cloud/container-service" rel="noopener" target="_blank">Kubernetes on the IBM Cloud</a> to run the training. The 17.000 training steps took roughly 1.5 days. In order to also leverage GPUs I want to look at <a href="https://github.com/IBM/FfDL" rel="noopener" target="_blank">FfDL</a>. I&#8217;ll blog about it when I&#8217;ll have found out more. If you want to use the IBM Cloud, you can get a <a href="https://ibm.biz/nheidloff" rel="noopener" target="_blank">free account</a>.</p>
<p><a href="http://heidloff.net/wp-content/uploads/2018/09/od-kubernetes.jpg"><img src="http://heidloff.net/wp-content/uploads/2018/09/od-kubernetes.jpg" alt="od-kubernetes" width="800" height="407" class="alignnone size-full wp-image-3088" srcset="http://heidloff.net/wp-content/uploads/2018/09/od-kubernetes.jpg 800w, http://heidloff.net/wp-content/uploads/2018/09/od-kubernetes-300x153.jpg 300w" sizes="(max-width: 800px) 100vw, 800px" /></a></p>
<p>After the training a frozen graph of the model needs to be created. The repo contains a script and a Docker container to do this.</p>
<p><strong>4) Usage of the Model in Notebooks and Apps</strong></p>
<p>The training model can be tested with a <a href="https://github.com/nheidloff/object-detection-anki-overdrive-cars#5-testing-of-the-model" rel="noopener" target="_blank">Python notebook</a>. The screenshot shows the detected objects in a test image.</p>
<p><a href="http://heidloff.net/wp-content/uploads/2018/09/notebook.jpg"><img src="http://heidloff.net/wp-content/uploads/2018/09/notebook.jpg" alt="notebook" width="800" height="652" class="alignnone size-full wp-image-3086" srcset="http://heidloff.net/wp-content/uploads/2018/09/notebook.jpg 800w, http://heidloff.net/wp-content/uploads/2018/09/notebook-300x245.jpg 300w" sizes="(max-width: 800px) 100vw, 800px" /></a></p>
<p>The repo also contains an <a href="https://github.com/nheidloff/object-detection-anki-overdrive-cars#6-setup-of-the-ios-app" rel="noopener" target="_blank">iOS app</a> which I found on <a href="https://github.com/csharpseattle/tensorflowiOS" rel="noopener" target="_blank">GitHub</a>.</p>
<p><strong>Connecting the Cars and the iOS App to the Watson IoT Platform</strong></p>
<p>In order to stop the Anki Overdrive cars when phones are put on the track, you need to set up additional components, especially the Node.js controller and the <a href="https://www.ibm.com/internet-of-things" rel="noopener" target="_blank">Watson IoT Platform</a>. In order to do this, follow the instructions from my project <a href="https://github.com/IBM-Bluemix/node-mqtt-for-anki-overdrive" rel="noopener" target="_blank">node-mqtt-for-anki-overdrive</a>.</p>
<p>Here is a diagram of the high level architecture:</p>
<p><a href="http://heidloff.net/wp-content/uploads/2018/09/od-architecture-small.jpg"><img src="http://heidloff.net/wp-content/uploads/2018/09/od-architecture-small.jpg" alt="od-architecture-small" width="800" height="445" class="alignnone size-full wp-image-3087" srcset="http://heidloff.net/wp-content/uploads/2018/09/od-architecture-small.jpg 800w, http://heidloff.net/wp-content/uploads/2018/09/od-architecture-small-300x167.jpg 300w" sizes="(max-width: 800px) 100vw, 800px" /></a></p>
<p>The next screenshot shows a simple <a href="https://nodered.org/" rel="noopener" target="_blank">Node-RED</a> flow that stops the cars when obstacles are detected.</p>
<p><a href="http://heidloff.net/wp-content/uploads/2018/09/node-red1.jpg"><img src="http://heidloff.net/wp-content/uploads/2018/09/node-red1.jpg" alt="node-red1" width="800" height="444" class="alignnone size-full wp-image-3085" srcset="http://heidloff.net/wp-content/uploads/2018/09/node-red1.jpg 800w, http://heidloff.net/wp-content/uploads/2018/09/node-red1-300x167.jpg 300w" sizes="(max-width: 800px) 100vw, 800px" /></a></p>
<p>If you want to run this demo yourself, you need an <a href="https://www.anki.com/en-us/overdrive/get-started" rel="noopener" target="_blank">Anki Overdrive Starter Kit</a> and the <a href="https://github.com/nheidloff/object-detection-anki-overdrive-cars" rel="noopener" target="_blank">code</a> from GitHub.</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/tensorflow-object-detection-deep-learning">Training TensorFlow Object Detection Models</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></content:encoded><wfw:commentRss>http://heidloff.net/article/tensorflow-object-detection-deep-learning/feed/</wfw:commentRss><slash:comments>0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">3090</post-id></item></channel></rss>