<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
>

<channel>
	<title>Page 4 &#8211; Niklas Heidloff</title>
	<atom:link href="http://heidloff.net/feed/?paged=4" rel="self" type="application/rss+xml" />
	<link>http://heidloff.net</link>
	<description></description>
	<lastBuildDate>
	Thu, 24 Nov 2022 10:47:53 +0000	</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.1.15</generator>
<site xmlns="com-wordpress:feed-additions:1">102773794</site>	<item>
		<title>IBM helps Partners to scale their Businesses</title>
		<link>http://heidloff.net/article/ibm-helps-partners-to-scale-their-businesses/</link>
				<pubDate>Tue, 14 Jun 2022 17:47:24 +0000</pubDate>
		<dc:creator><![CDATA[Niklas Heidloff]]></dc:creator>
				<category><![CDATA[Articles]]></category>

		<guid isPermaLink="false">http://heidloff.net/?p=5106</guid>
				<description><![CDATA[<p>IBM Build Labs helps IBM partners to scale their businesses and to reach new markets. I am very proud that our team has produced two reference architectures to accomplish this: Kubernetes Operators Reference Architecture Software as a Service (SaaS) Reference Architecture This short video gives you more context. If you are interested in working with [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/ibm-helps-partners-to-scale-their-businesses/">IBM helps Partners to scale their Businesses</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>IBM Build Labs helps IBM partners to scale their businesses and to reach new markets. <span id="more-5106"></span></p>
<p>I am very proud that our team has produced two reference architectures to accomplish this:</p>
<ul>
<li><a href="https://github.com/ibm/operator-sample-go" rel="noopener noreferrer" target="_blank">Kubernetes Operators Reference Architecture</a></li>
<li><a href="https://github.com/IBM/multi-tenancy" rel="noopener noreferrer" target="_blank">Software as a Service (SaaS) Reference Architecture</a></li>
</ul>
<p>This short video gives you more context.</p>
<p><iframe width="853" height="480" src="//www.youtube.com/embed/WDBn-kgkct4" frameborder="0" allowfullscreen></iframe></p>
<p>If you are interested in working with us, reach us to me on Twitter or via the GitHub repos.</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/ibm-helps-partners-to-scale-their-businesses/">IBM helps Partners to scale their Businesses</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></content:encoded>
									<post-id xmlns="com-wordpress:feed-additions:1">5106</post-id>	</item>
		<item>
		<title>Home Improvements</title>
		<link>http://heidloff.net/article/home-improvements/</link>
				<pubDate>Mon, 13 Jun 2022 19:41:59 +0000</pubDate>
		<dc:creator><![CDATA[Niklas Heidloff]]></dc:creator>
				<category><![CDATA[Articles]]></category>

		<guid isPermaLink="false">http://heidloff.net/?p=5099</guid>
				<description><![CDATA[<p>Over the last two Corona years I have spent some time with home improvements on weekends. A lot of fun! Unfortunately I didn&#8217;t document all steps, but the pictures below give an idea of the involved work.</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/home-improvements/">Home Improvements</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>Over the last two Corona years I have spent some time with home improvements on weekends. A lot of fun!<span id="more-5099"></span></p>
<p>Unfortunately I didn&#8217;t document all steps, but the pictures below give an idea of the involved work.</p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke01.jpg" alt="" width="1024" height="570" class="alignnone size-full wp-image-5073" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke01.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke01-300x167.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke01-768x428.jpg 768w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke02.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5074" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke02.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke02-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke02-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke02-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke03.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5075" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke03.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke03-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke03-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke03-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke04.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5076" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke04.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke04-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke04-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke04-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke05.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5077" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke05.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke05-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke05-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke05-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke06.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5078" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke06.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke06-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke06-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke06-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke07.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5079" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke07.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke07-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke07-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke07-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke08.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5080" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke08.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke08-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke08-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke08-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke09.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5081" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke09.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke09-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke09-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke09-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke10.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5082" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke10.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke10-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke10-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke10-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke11.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5083" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke11.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke11-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke11-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke11-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke12.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5084" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke12.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke12-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke12-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke12-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke13.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5085" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke13.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke13-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke13-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke13-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke14.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5086" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke14.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke14-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke14-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke14-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke15.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5087" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke15.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke15-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke15-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke15-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke16.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5088" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke16.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke16-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke16-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke16-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke17.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5089" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke17.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke17-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke17-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke17-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke18.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5090" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke18.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke18-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke18-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke18-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke19.jpg" alt="" width="1034" height="776" class="alignnone size-full wp-image-5091" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke19.jpg 1034w, http://heidloff.net/wp-content/uploads/2022/06/theke19-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke19-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke19-1024x768.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke19-135x100.jpg 135w" sizes="(max-width: 1034px) 100vw, 1034px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke21.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5093" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke21.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke21-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke21-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke21-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke22.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5094" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke22.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke22-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke22-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke22-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke23.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5095" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke23.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke23-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke23-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke23-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke24.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5096" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke24.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke24-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke24-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke24-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/06/theke25.jpg" alt="" width="1024" height="768" class="alignnone size-full wp-image-5097" srcset="http://heidloff.net/wp-content/uploads/2022/06/theke25.jpg 1024w, http://heidloff.net/wp-content/uploads/2022/06/theke25-300x225.jpg 300w, http://heidloff.net/wp-content/uploads/2022/06/theke25-768x576.jpg 768w, http://heidloff.net/wp-content/uploads/2022/06/theke25-135x100.jpg 135w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/home-improvements/">Home Improvements</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></content:encoded>
									<post-id xmlns="com-wordpress:feed-additions:1">5099</post-id>	</item>
		<item>
		<title>40 Blogs in 40 Days</title>
		<link>http://heidloff.net/article/40-blogs-in-40-days/</link>
				<pubDate>Thu, 14 Apr 2022 05:18:11 +0000</pubDate>
		<dc:creator><![CDATA[Niklas Heidloff]]></dc:creator>
				<category><![CDATA[Articles]]></category>

		<guid isPermaLink="false">http://heidloff.net/?p=5063</guid>
				<description><![CDATA[<p>Many IBM partners want to understand how to scale their offerings to reach new markets. Technically this often translates to two technologies: Kubernetes Operators and SaaS (Software as a Service). As I&#8217;m working with IBM partners, my team has created several assets for our co-creation engagements. Below is the list of blogs about these topics. [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/40-blogs-in-40-days/">40 Blogs in 40 Days</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p><em>Many IBM partners want to understand how to scale their offerings to reach new markets. Technically this often translates to two technologies: Kubernetes Operators and SaaS (Software as a Service). As I&#8217;m working with IBM partners, my team has created several assets for our co-creation engagements.</em><span id="more-5063"></span></p>
<p>Below is the list of blogs about these topics. Over the last 40 (business) days I&#8217;ve written 40 blogs. As always, thanks a lot for your feedback!</p>
<p><strong>Operators &#8211; Overview and Scenarios</strong></p>
<ul>
<li><a href="http://heidloff.net/article/why-you-should-build-kubernetes-operators/" rel="noopener noreferrer" target="_blank">Why you should build Kubernetes Operators</a></li>
<li><a href="http://heidloff.net/article/automatically-archiving-data-kubernetes-operators/" rel="noopener noreferrer" target="_blank">Day 2 Scenario: Automatically Archiving Data</a></li>
<li><a href="http://heidloff.net/article/scaling-applications-automatically-operators/" rel="noopener noreferrer" target="_blank">Day 2 Scenario: Automatically Scaling of Applications</a></li>
<li><a href="http://heidloff.net/article/the-kubernetes-operator-metamodel/" rel="noopener noreferrer" target="_blank">The Kubernetes Operator Metamodel</a></li>
</ul>
<p><strong>Go based Operators</strong></p>
<ul>
<li><a href="http://heidloff.net/article/updating-resources-kubernetes-operators/" rel="noopener noreferrer" target="_blank">Creating and updating Resources</a></li>
<li><a href="http://heidloff.net/article/deleting-resources-kubernetes-operators/" rel="noopener noreferrer" target="_blank">Deleting Resources</a></li>
<li><a href="http://heidloff.net/article/storing-state-status-kubernetes-resources-conditions-operators-go/" rel="noopener noreferrer" target="_blank">Storing State of Resources with Conditions</a></li>
<li><a href="http://heidloff.net/article/finding-kubernetes-version-capabilities-operators/" rel="noopener noreferrer" target="_blank">Finding out the Kubernetes Versions and Capabilities</a></li>
<li><a href="http://heidloff.net/article/configuring-webhooks-kubernetes-operators/" rel="noopener noreferrer" target="_blank">Configuring Webhooks</a></li>
<li><a href="http://heidloff.net/article/developing-initialization-validation-webhooks-kubernetes-operators/" rel="noopener noreferrer" target="_blank">Initialization and Validation Webhooks</a></li>
<li><a href="http://heidloff.net/article/converting-custom-resource-versions-kubernetes-operators/" rel="noopener noreferrer" target="_blank">Converting Custom Resource Versions</a></li>
<li><a href="http://heidloff.net/article/defining-dependencies-kubernetes-operators/" rel="noopener noreferrer" target="_blank">Defining Dependencies</a></li>
<li><a href="http://heidloff.net/article/exporting-metrics-kubernetes-applications-prometheus/" rel="noopener noreferrer" target="_blank">Exporting Metrics from Kubernetes Apps for Prometheus</a></li>
<li><a href="http://heidloff.net/article/accessing-kubernetes-from-go-applications/" rel="noopener noreferrer" target="_blank">Accessing Kubernetes from Go Applications</a></li>
<li><a href="http://heidloff.net/article/how-to-build-your-own-database-on-kubernetes/" rel="noopener noreferrer" target="_blank">How to build your own Database on Kubernetes</a></li>
<li><a href="http://heidloff.net/quarkus/building-databases-kubernetes-quarkus/" rel="noopener noreferrer" target="_blank">Building Databases on Kubernetes with Quarkus</a></li>
<li><a href="http://heidloff.net/article/manually-deploying-operators-to-kubernetes/" rel="noopener noreferrer" target="_blank">Manually deploying Operators to Kubernetes</a></li>
<li><a href="http://heidloff.net/article/deploying-operators-operator-lifecycle-manager-olm/" rel="noopener noreferrer" target="_blank">Deploying Operators with the Operator Lifecycle Manager</a></li>
<li><a href="http://heidloff.net/article/importing-go-modules-kubernetes-operators/" rel="noopener noreferrer" target="_blank">Importing Go Modules in Operators</a></li>
<li><a href="http://heidloff.net/article/accessing-third-party-custom-resources-go-operators/" rel="noopener noreferrer" target="_blank">Accessing third Party Custom Resources in Go Operators</a></li>
<li><a href="http://heidloff.net/article/object-oriented-concepts-golang/" rel="noopener noreferrer" target="_blank">Using object-oriented Concepts in Golang based Operators</a></li>
</ul>
<p><strong>Quarkus based Operators</strong></p>
<ul>
<li><a href="http://heidloff.net/article/developing-quarkus-and-web-application-locally/" rel="noopener noreferrer" target="_blank">Developing Quarkus and Web Applications locally</a></li>
<li><a href="http://heidloff.net/article/developing-debugging-kubernetes-operators-java/" rel="noopener noreferrer" target="_blank">Developing and Debugging Kubernetes Operators in Java</a></li>
<li><a href="http://heidloff.net/article/accessing-kubernetes-resources-from-java-operators" rel="noopener noreferrer" target="_blank">Accessing Kubernetes Resources from Java Operators</a></li>
<li><a href="http://heidloff.net/article/leveraging-third-party-operators-in-kubernetes-operators/" rel="noopener noreferrer" target="_blank">Leveraging third party Operators in Kubernetes Operators</a></li>
<li><a href="http://heidloff.net/article/creating-database-schemas-kubernetes-operators/" rel="noopener noreferrer" target="_blank">Creating Database Schemas in Kubernetes Operators</a></li>
<li><a href="http://heidloff.net/articles/resources-to-build-kubernetes-operators/" rel="noopener noreferrer" target="_blank">Resources to build Kubernetes Operators</a></li>
</ul>
<p><strong>SaaS Reference Architecture and DevSecOps</strong></p>
<ul>
<li><a href="http://heidloff.net/article/open-source-multi-cloud-assets-saas" rel="noopener noreferrer" target="_blank">New Open-Source Multi-Cloud Asset to build SaaS</a></li>
<li><a href="http://heidloff.net/article/how-to-build-saas-for-multiple-tenants/" rel="noopener noreferrer" target="_blank">How to build SaaS for multiple Tenants</a></li>
<li><a href="http://heidloff.net/article/accessing-postgres-from-quarkus-containers-via-tls/" rel="noopener noreferrer" target="_blank">Accessing Postgres from Quarkus Containers via TLS</a></li>
<li><a href="http://heidloff.net/article/typical-authentication-flow-kubernetes-applications/" rel="noopener noreferrer" target="_blank">Typical Authentication Flow for Kubernetes Applications</a></li>
<li><a href="http://heidloff.net/article/containerizing-web-applications/" rel="noopener noreferrer" target="_blank">Containerizing Web Applications</a></li>
<li><a href="http://heidloff.net/article/containerizing-quarkus-applications/" rel="noopener noreferrer" target="_blank">Containerizing Quarkus Applications</a></li>
<li><a href="http://heidloff.net/article/devsecops-saas-reference-architecture-openshift/" rel="noopener noreferrer" target="_blank">DevSecOps for SaaS Reference Architecture on OpenShift</a></li>
<li><a href="http://heidloff.net/article/tekton-without-tekton-devsecops-pipelines/" rel="noopener noreferrer" target="_blank">Tekton without Tekton in DevSecOps Pipelines</a></li>
<li><a href="http://heidloff.net/article/developing-serverless-toolchains/" rel="noopener noreferrer" target="_blank">Developing Serverless Toolchains</a></li>
<li><a href="http://heidloff.net/article/deploying-serverless-saas-with-serverless-toolchains/" rel="noopener noreferrer" target="_blank">Deploying Serverless SaaS with Serverless Toolchains</a></li>
<li><a href="http://heidloff.net/article/shift-left-continuous-integration-devsecops-pipelines/" rel="noopener noreferrer" target="_blank">Shift-Left Continuous Integration with DevSecOps Pipelines</a></li>
<li><a href="http://heidloff.net/article/change-evidence-issue-management-devsecops/" rel="noopener noreferrer" target="_blank">Change, Evidence and Issue Management with DevSecOps</a></li>
<li><a href="http://heidloff.net/article/continuous-delivery-ibm-devsecops-reference-architecture/" rel="noopener noreferrer" target="_blank">Continuous Delivery with DevSecOps Reference Architecture</a></li>
</ul>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/40-blogs-in-40-days/">40 Blogs in 40 Days</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></content:encoded>
									<post-id xmlns="com-wordpress:feed-additions:1">5063</post-id>	</item>
		<item>
		<title>Scaling Applications automatically with Operators</title>
		<link>http://heidloff.net/article/scaling-applications-automatically-operators/</link>
				<pubDate>Thu, 14 Apr 2022 02:33:29 +0000</pubDate>
		<dc:creator><![CDATA[Niklas Heidloff]]></dc:creator>
				<category><![CDATA[Articles]]></category>

		<guid isPermaLink="false">http://heidloff.net/?p=5056</guid>
				<description><![CDATA[<p>The real power or Kubernetes operators are not day 1 tasks like the initial deployments, but the automation of day 2 operations. This article describes a sample operator that scales up an application automatically based on the number of API requests. The complete source code from this article is available in the ibm/operator-sample-go repo. The [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/scaling-applications-automatically-operators/">Scaling Applications automatically with Operators</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p><em>The real power or Kubernetes operators are not day 1 tasks like the initial deployments, but the automation of day 2 operations. This article describes a sample operator that scales up an application automatically based on the number of API requests.</em><span id="more-5056"></span></p>
<p>The complete source code from this article is available in the <a href="https://github.com/IBM/operator-sample-go" rel="noopener noreferrer" target="_blank">ibm/operator-sample-go repo</a>. The repo includes operator samples that demonstrate patterns and best practises. It also includes another day 2 sample scenario: <a href="http://heidloff.net/article/automatically-archiving-data-kubernetes-operators/" rel="noopener noreferrer" target="_blank">Automatically Archiving Data with Kubernetes Operators</a>.</p>
<p>The sample contains the following components:</p>
<ul>
<li>Prometheus: Stores metrics from various sources and provides query capabilities</li>
<li>Sample microservice: Provides a /hello endpoint which exposes a counter to Prometheus</li>
<li>Application operator (core): Deploys the microservice</li>
<li>Application operator&#8217;s CronJob: Separate container which scales up the number of pod instances based on the amount of /hello invocations</li>
</ul>
<p>To set up and configure Prometheus, check our my previous article <a href="http://heidloff.net/article/exporting-metrics-kubernetes-applications-prometheus/" rel="noopener noreferrer" target="_blank">Exporting Metrics from Kubernetes Apps for Prometheus</a>. Below I focus on the implementation of the auto-scaler.</p>
<p>The microservice has been implemented with Quarkus. It uses Eclipse MicroProfile to track the number of invocations (see <a href="https://github.com/IBM/operator-sample-go/blob/f130dc768df6d9178f6395690f508f0840e0b5ef/simple-microservice/src/main/java/net/heidloff/GreetingResource.java" rel="noopener noreferrer" target="_blank">code</a>).</p>
<pre class="brush: plain; title: ; notranslate">
import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.eclipse.microprofile.metrics.annotation.Counted;

@Path(&quot;/hello&quot;)
public class GreetingResource {
  @ConfigProperty(name = &quot;greeting.message&quot;) 
  String message;

  @GET
  @Produces(MediaType.TEXT_PLAIN)
  @Counted(name = &quot;countHelloEndpointInvoked&quot;, description = &quot;How often /hello has been invoked&quot;)
  public String hello() {
    return String.format(&quot;Hello %s&quot;, message);        
  }
}
</pre>
<p>To allow Prometheus to scrape these metrics, a <a href="https://github.com/IBM/operator-sample-go/blob/f130dc768df6d9178f6395690f508f0840e0b5ef/simple-microservice/kubernetes/service-monitor.yaml" rel="noopener noreferrer" target="_blank">ServiceMonitor</a> is used.</p>
<pre class="brush: plain; title: ; notranslate">
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    app: myapplication
  name: myapplication-metrics-monitor
  namespace: application-beta
spec:
  endpoints:
    - path: /q/metrics
  selector:
    matchLabels:
      app: myapplication
</pre>
<p>With the Prometheus user interface queries to this data can be done.</p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-17.52.20.png" alt="" width="1826" height="856" class="alignnone size-full wp-image-5050" srcset="http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-17.52.20.png 1826w, http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-17.52.20-300x141.png 300w, http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-17.52.20-768x360.png 768w, http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-17.52.20-1024x480.png 1024w" sizes="(max-width: 1826px) 100vw, 1826px" /></p>
<p>To develop the auto-scaler, a separate image/container is used. This container is an extension to the application controller. The application controller sets up a CronJob for the auto-scaler container so that it is run on a scheduled basis. The <a href="https://github.com/IBM/operator-sample-go/blob/f130dc768df6d9178f6395690f508f0840e0b5ef/operator-application-scaler/kubernetes/cronjob.yaml" rel="noopener noreferrer" target="_blank">CronJob</a> that is created by the controller looks like this. Note that the application name and namespace are passed in as parameter.</p>
<pre class="brush: plain; title: ; notranslate">
apiVersion: batch/v1
kind: CronJob
metadata:
  name: application-scaler
  namespace: operator-application-system
spec:
  schedule: &quot;0 * * * *&quot;
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: application-scale
            image: docker.io/nheidloff/operator-application-scaler:v1.0.2
            imagePullPolicy: IfNotPresent
            env:
            - name: APPLICATION_RESOURCE_NAME
              value: &quot;application&quot;
            - name: APPLICATION_RESOURCE_NAMESPACE
              value: &quot;application-beta&quot;
          restartPolicy: OnFailure
</pre>
<p>The <a href="https://github.com/IBM/operator-sample-go/blob/f130dc768df6d9178f6395690f508f0840e0b5ef/operator-application-scaler/scaler/scaler.go" rel="noopener noreferrer" target="_blank">implementation</a> of the actual auto-scaler is trivial. I&#8217;ve used the <a href="https://github.com/prometheus/client_golang/" rel="noopener noreferrer" target="_blank">Prometheus Go client library</a>. Note that this library is still considered experimental. Alternatively you can use the <a href="https://prometheus.io/docs/prometheus/latest/querying/api/" rel="noopener noreferrer" target="_blank">Prometheus HTTP API</a>.</p>
<pre class="brush: plain; title: ; notranslate">
prometheusAddress := &quot;http://prometheus-operated.monitoring:9090&quot;
queryAmountHelloEndpointInvocations := &quot;application_net_heidloff_GreetingResource_countHelloEndpointInvoked_total&quot;
client, err := api.NewClient(api.Config{
  Address: prometheusAddress,
})
if err != nil {
  os.Exit(1)
}
v1api := v1.NewAPI(client)
ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
defer cancel()
result, warnings, err := v1api.Query(ctx, queryAmountHelloEndpointInvocations, time.Now())
if err != nil {
  os.Exit(1)
}
resultVector, conversionSuccessful := (result).(model.Vector)
if conversionSuccessful == true {
  if resultVector.Len() &gt; 0 {
    firstElement := resultVector[0]
    if firstElement.Value &gt; 5 {
      // Note: '5' is only used for demo purposes
      scaleUp()
    } 
  }
}
</pre>
<p>To learn more about operator patterns and best practices, check out the repo <a href="https://github.com/IBM/operator-sample-go" rel="noopener noreferrer" target="_blank">operator-sample-go</a>. The instructions how to run the auto-scaler demo are in the <a href="https://github.com/IBM/operator-sample-go/blob/f130dc768df6d9178f6395690f508f0840e0b5ef/operator-application-scaler/README.md" rel="noopener noreferrer" target="_blank">documentation</a>.</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/scaling-applications-automatically-operators/">Scaling Applications automatically with Operators</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></content:encoded>
									<post-id xmlns="com-wordpress:feed-additions:1">5056</post-id>	</item>
		<item>
		<title>Exporting Metrics from Kubernetes Apps for Prometheus</title>
		<link>http://heidloff.net/article/exporting-metrics-kubernetes-applications-prometheus/</link>
				<pubDate>Wed, 13 Apr 2022 05:45:48 +0000</pubDate>
		<dc:creator><![CDATA[Niklas Heidloff]]></dc:creator>
				<category><![CDATA[Articles]]></category>

		<guid isPermaLink="false">http://heidloff.net/?p=5043</guid>
				<description><![CDATA[<p>Operators automate day 2 operations for Kubernetes based software. Operators need to know the state of their operands. One way to find out the state is to check metrics information stored in Prometheus. This article describes how to export metrics from applications running on Kubernetes to make them accessible by Prometheus. The complete source code [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/exporting-metrics-kubernetes-applications-prometheus/">Exporting Metrics from Kubernetes Apps for Prometheus</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p><em>Operators automate day 2 operations for Kubernetes based software. Operators need to know the state of their operands. One way to find out the state is to check metrics information stored in Prometheus. This article describes how to export metrics from applications running on Kubernetes to make them accessible by Prometheus.</em><span id="more-5043"></span></p>
<p>The complete source code from this article is available in the <a href="https://github.com/IBM/operator-sample-go" rel="noopener noreferrer" target="_blank">ibm/operator-sample-go</a> repo. The repo includes operator samples that demonstrate patterns and best practises.</p>
<p>Let&#8217;s look how Prometheus can be deployed on Kubernetes and how Go and Java based applications can export metrics so that Prometheus is able to read and store it.</p>
<p><strong>1. Setup of Prometheus</strong></p>
<p>An easy way to install Prometheus is to utilize the <a href="https://operatorhub.io/operator/prometheus" rel="noopener noreferrer" target="_blank">Prometheus operator</a>. Before it can be installed, the Operator Lifecycle Manager (OLM) needs to be deployed. When you develop operators with the <a href="https://sdk.operatorframework.io/" rel="noopener noreferrer" target="_blank">Operator SDK</a>, it is possible to deploy OLM with just one command:</p>
<pre class="brush: plain; title: ; notranslate">
$ operator-sdk olm install
or
$ curl -sL https://github.com/operator-framework/operator-lifecycle-manager/releases/download/v0.20.0/install.sh | bash -s v0.20.0
</pre>
<p>Next the Prometheus operator can be installed.</p>
<pre class="brush: plain; title: ; notranslate">
$ kubectl create -f https://operatorhub.io/install/prometheus.yaml
</pre>
<p><strong>2. Configuration of Prometheus</strong></p>
<p>To set up the actual Prometheus instance on Kubernetes, RBAC access rights need to be defined. Read the <a href="https://book.kubebuilder.io/reference/metrics.html" rel="noopener noreferrer" target="_blank">documentation</a> for details. In summary the following four files handle the minimal setup.</p>
<ul>
<li><a href="https://github.com/IBM/operator-sample-go/blob/2a00d28cd40bf0c877589feb3fc636a7fa1e69f9/prometheus/prometheus/service-account.yaml" rel="noopener noreferrer" target="_blank">service-account.yaml</a></li>
<li><a href="https://github.com/IBM/operator-sample-go/blob/2a00d28cd40bf0c877589feb3fc636a7fa1e69f9/prometheus/prometheus/cluster-role.yaml" rel="noopener noreferrer" target="_blank">cluster-role.yaml</a></li>
<li><a href="https://github.com/IBM/operator-sample-go/blob/2a00d28cd40bf0c877589feb3fc636a7fa1e69f9/prometheus/prometheus/cluster-role-binding.yaml" rel="noopener noreferrer" target="_blank">cluster-role-binding.yaml</a></li>
<li><a href="https://github.com/IBM/operator-sample-go/blob/2a00d28cd40bf0c877589feb3fc636a7fa1e69f9/prometheus/prometheus/prometheus.yaml" rel="noopener noreferrer" target="_blank">prometheus.yaml</a></li>
</ul>
<p><strong>3. Linkage between Prometheus and custom Applications</strong></p>
<p>Applications can export data in the format Prometheus expects. The applications don&#8217;t push this data, but they provide endpoints that Prometheus pulls on a scheduled basis. To tell Prometheus these endpoints, the custom resource &#8216;ServiceMonitor&#8217; is used.</p>
<p>Here is a simple <a href="https://github.com/IBM/operator-sample-go/blob/2a00d28cd40bf0c877589feb3fc636a7fa1e69f9/simple-microservice/kubernetes/service-monitor.yaml" rel="noopener noreferrer" target="_blank">sample</a>. The trick is the correct usage of labels and selectors. The selector in the service monitor finds the appropriate service. The selector in the service links to pods.</p>
<pre class="brush: plain; title: ; notranslate">
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    app: myapplication
  name: myapplication-metrics-monitor
  namespace: application-beta
spec:
  endpoints:
    - path: /q/metrics
  selector:
    matchLabels:
      app: myapplication
</pre>
<p>When building operators with the Operator SDK, the SDK creates this <a href="https://github.com/IBM/operator-sample-go/blob/2a00d28cd40bf0c877589feb3fc636a7fa1e69f9/operator-application/config/prometheus/monitor.yaml" rel="noopener noreferrer" target="_blank">service monitor</a> automatically. All you need to do is to <a href="https://github.com/IBM/operator-sample-go/blob/2a00d28cd40bf0c877589feb3fc636a7fa1e69f9/operator-application/config/default/kustomization.yaml#L24-L25" rel="noopener noreferrer" target="_blank">uncomment one line</a>.</p>
<p><strong>4. Writing Metrics</strong></p>
<p>There are several libraries and frameworks for different languages available. Here is a <a href="https://github.com/IBM/operator-sample-go/blob/2a00d28cd40bf0c877589feb3fc636a7fa1e69f9/operator-application/controllers/application/controller.go#L23-L33" rel="noopener noreferrer" target="_blank">sample</a> how to write metrics from a Golang application.</p>
<pre class="brush: plain; title: ; notranslate">
import (
  &quot;github.com/prometheus/client_golang/prometheus&quot;
)
var countReconcileLaunched = prometheus.NewCounter(
  prometheus.CounterOpts{
    Name: &quot;reconcile_launched_total&quot;,
    Help: &quot;reconcile_launched_total&quot;,
  },
)
func (reconciler *ApplicationReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
  countReconcileLaunched.Inc()
  ...
</pre>
<p>To learn more about operator patterns and best practices, check out the repo <a href="https://github.com/IBM/operator-sample-go" rel="noopener noreferrer" target="_blank">operator-sample-go</a>. The repo shows how to export metrics from a Quarkus application and a Go based operator. The screenshot shows the two registered service monitors.</p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-17.53.07.png" alt="" width="2436" height="1474" class="alignnone size-full wp-image-5051" srcset="http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-17.53.07.png 2436w, http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-17.53.07-300x182.png 300w, http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-17.53.07-768x465.png 768w, http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-17.53.07-1024x620.png 1024w" sizes="(max-width: 2436px) 100vw, 2436px" /></p>
<p>Finally the data can be queried, for example in the Prometheus user interface. </p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-17.52.02.png" alt="" width="1824" height="854" class="alignnone size-full wp-image-5049" srcset="http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-17.52.02.png 1824w, http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-17.52.02-300x140.png 300w, http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-17.52.02-768x360.png 768w, http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-12-at-17.52.02-1024x479.png 1024w" sizes="(max-width: 1824px) 100vw, 1824px" /></p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/exporting-metrics-kubernetes-applications-prometheus/">Exporting Metrics from Kubernetes Apps for Prometheus</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></content:encoded>
									<post-id xmlns="com-wordpress:feed-additions:1">5043</post-id>	</item>
		<item>
		<title>Why you should build Kubernetes Operators</title>
		<link>http://heidloff.net/article/why-you-should-build-kubernetes-operators/</link>
				<pubDate>Tue, 12 Apr 2022 09:05:18 +0000</pubDate>
		<dc:creator><![CDATA[Niklas Heidloff]]></dc:creator>
				<category><![CDATA[Articles]]></category>

		<guid isPermaLink="false">http://heidloff.net/?p=5031</guid>
				<description><![CDATA[<p>Operators are a powerful technology to automate operations of software in Kubernetes clusters. This article describes scenarios when operators should be used and which value they provide. There are multiple technologies to install and operate software in Kubernetes: kubectl, oc, Helm, Kustomize, CI/CD, GitOps, operators and more. As always the answer to the question when [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/why-you-should-build-kubernetes-operators/">Why you should build Kubernetes Operators</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p><em>Operators are a powerful technology to automate operations of software in Kubernetes clusters. This article describes scenarios when operators should be used and which value they provide.</em><span id="more-5031"></span></p>
<p>There are multiple technologies to install and operate software in Kubernetes: kubectl, oc, Helm, Kustomize, CI/CD, GitOps, operators and more. As always the answer to the question when to use what is: It depends. Let me share my top three reasons why to use operators.</p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/04/operators-benefits.jpg" alt="" width="2718" height="326" class="alignnone size-full wp-image-5033" srcset="http://heidloff.net/wp-content/uploads/2022/04/operators-benefits.jpg 2718w, http://heidloff.net/wp-content/uploads/2022/04/operators-benefits-300x36.jpg 300w, http://heidloff.net/wp-content/uploads/2022/04/operators-benefits-768x92.jpg 768w, http://heidloff.net/wp-content/uploads/2022/04/operators-benefits-1024x123.jpg 1024w" sizes="(max-width: 2718px) 100vw, 2718px" /></p>
<p><strong>Top three Reasons to use Operators:</strong></p>
<ol>
<li>Automation of Day 2 Operations
<ul>
<li>Autopilot and Self-Healing</li>
<li>Predictive analytics</li>
</ul>
</li>
<li>Reusability of Software
<ul>
<li>Hubs and Marketplaces</li>
<li>Internal and external multi-tenancy Applications</li>
</ul>
</li>
<li>Leverage of the Kubernetes Community
<ul>
<li>Ecosystem, Tools and Offerings</li>
<li>Industry Standard</li>
</ul>
</li>
</ol>
<p><strong>1. Automation of Day 2 Operations</strong></p>
<p>The main purpose of operators is to automate operations. While this sounds obvious, often there is a perception that operators are only another way to deploy software. The key value of operators is to make operations of software as seamless as possible. I often think of operators as the next best way after Software as as Service (SaaS) to easily manage software running in our own clusters.</p>
<p>Kubernetes operators are capable to automate the expensive and error likely human operations. Features like autopilot and self-healing are great scenarios. For example databases can be archived automatically, software can automatically be scaled up and down and missing resources can be recreated when they have been deleted by mistake or in catastrophic events. It&#8217;s even possible to predict failures before they happen and to take appropriate actions.</p>
<p>These automations work for all types of workloads (stateful and stateless) and all types of Kubernetes resources (compute, storage, network). All business specific automation functionality can be bundled in one operator component rather than using a diverse set of tools.</p>
<p><strong>2. Reusability of Software</strong></p>
<p>Another benefit of operators is the reusability of software. With operators software and libraries can be bundled so that it can be used in different contexts. This approach is different from CI/CD pipelines where software is deployed more frequently specifically for one application. </p>
<p>Software providers can expose their operators in various catalogs, hubs and marketplaces like OperatorHub.io, Red Hat Marketplace, the integrated OperatorHub in OpenShift, etc. This allows them to reach new markets and to promote their software. While catalogs like OperatorHub.io are primarily used to increase awareness, marketplaces like Red Hat Marketplace provide commercialization options.</p>
<p>Additionally operators can be utilized to share software within companies and to share software with specific clients. In this scenario operators can be published in internal catalogs or they can be directly deployed to clusters.</p>
<p><strong>3. Leverage of the Kubernetes Community</strong></p>
<p>Kubernetes is the de-facto standard how to run software in the cloud. There is a huge ecosystem supporting Kubernetes, providing samples, tools and commercial offerings and more. Operators leverage this community, since they are a natural and Kubernetes-native way to extend Kubernetes. Operators are not only used to manage third-party resources, but they are also used internally. Because operators base on the Kubernetes model, existing development tools, CLIs, monitoring tools, etc. can be used.</p>
<p>Kubernetes provides proven and established industry standards how to define, deploy and operate software. For example for production workloads a declarative approach is employed (e.g. GitOps ready), custom resources can be defined and standard CLIs and data formats (yaml, json) are used. It is not necessary to learn and utilize proprietary functionality.</p>
<p><strong>What&#8217;s next?</strong></p>
<p>To learn more about operator patterns and best practices, check out the <a href="https://github.com/IBM/operator-sample-go" rel="noopener noreferrer" target="_blank">ibm/operator-sample-go</a> repo. The repo comes with two typical operators for stateless and stateful workloads, samples how to implement autopilot functionality and documentation.</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/why-you-should-build-kubernetes-operators/">Why you should build Kubernetes Operators</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></content:encoded>
									<post-id xmlns="com-wordpress:feed-additions:1">5031</post-id>	</item>
		<item>
		<title>Accessing Kubernetes from Go Applications</title>
		<link>http://heidloff.net/article/accessing-kubernetes-from-go-applications/</link>
				<pubDate>Mon, 11 Apr 2022 05:07:34 +0000</pubDate>
		<dc:creator><![CDATA[Niklas Heidloff]]></dc:creator>
				<category><![CDATA[Articles]]></category>

		<guid isPermaLink="false">http://heidloff.net/?p=5022</guid>
				<description><![CDATA[<p>When developing auto-pilot capabilities in Kubernetes operators, often CronJobs and Jobs are used to automate operations. This article describes how to implement such jobs with Golang. The complete source code from this article is available in the ibm/operator-sample-go repo. My previous article Automatically Archiving Data with Kubernetes Operators describes an auto pilot sample scenario to [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/accessing-kubernetes-from-go-applications/">Accessing Kubernetes from Go Applications</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p><em>When developing auto-pilot capabilities in Kubernetes operators, often CronJobs and Jobs are used to automate operations. This article describes how to implement such jobs with Golang.</em><span id="more-5022"></span></p>
<p>The complete source code from this article is available in the <a href="https://github.com/IBM/operator-sample-go/tree/main/operator-database-backup" rel="noopener noreferrer" target="_blank">ibm/operator-sample-go</a> repo.</p>
<p>My previous article <a href="http://heidloff.net/article/automatically-archiving-data-kubernetes-operators/" rel="noopener noreferrer" target="_blank">Automatically Archiving Data with Kubernetes Operators</a> describes an auto pilot sample scenario to back up data on a scheduled basis. The <a href="https://github.com/IBM/operator-sample-go/blob/0b46e5ee18b892293ce2ff2eb565ea9500de298b/operator-database-backup/backup/backup.go" rel="noopener noreferrer" target="_blank">code</a> of the backup job is pretty straight forward. I&#8217;ve implemented a Go image with the following functionality.</p>
<ul>
<li>Get the database backup resource from Kubernetes</li>
<li>Validate input environment variables</li>
<li>Read data from the database system</li>
<li>Write data to object storage</li>
<li>Write status as conditions in database backup resource</li>
</ul>
<p><strong>Dockerfile</strong></p>
<p>To package up the Go application, I&#8217;ve defined the following <a href="https://github.com/IBM/operator-sample-go/blob/64dac7d036ce81b9ceba3e1dd2dd1f1c83cd2968/operator-database-backup/Dockerfile" rel="noopener noreferrer" target="_blank">Dockerfile</a>. Some notes:</p>
<ul>
<li>Uses two stages, one for build and one for runtime</li>
<li>The Go dependencies are downloaded first to cache them in an image layer</li>
<li>With the parameter &#8216;GOOS=linux&#8217; the application is built for Linux</li>
<li>Uses Red Hat&#8217;s UBI image, for example in order to also run on OpenShift</li>
<li>The compiled &#8216;app&#8217; file is a program that ends after it&#8217;s done (not a web server)</li>
</ul>
<pre class="brush: plain; title: ; notranslate">
FROM golang:1.18.0 AS builder
WORKDIR /app
COPY go.mod ./
COPY go.sum ./
RUN go mod download
COPY main.go ./
COPY backup ./backup/
RUN CGO_ENABLED=0 GOOS=linux go build -a -o app .

FROM registry.access.redhat.com/ubi8/ubi-micro:8.5-833
WORKDIR /
COPY --from=builder /app /
CMD [&quot;./app&quot;]
</pre>
<p><strong>Access to Kubernetes</strong></p>
<p>Jobs that execute work on behalf of operators usually have to access Kubernetes built-in and custom resources. For example jobs need to store the output of the jobs in the &#8216;status.conditions&#8217; field of custom resources. Operators built with the Operator SDK provide convenience functionality to get an instance of the Kubernetes client to access resources in clusters. Go applications that are not operators can use the same library, but the initialization is slightly different.</p>
<p>Let&#8217;s take a look at the <a href="https://github.com/IBM/operator-sample-go/blob/64dac7d036ce81b9ceba3e1dd2dd1f1c83cd2968/operator-database-backup/backup/backup_resource.go" rel="noopener noreferrer" target="_blank">code</a>.</p>
<pre class="brush: plain; title: ; notranslate">
import (
	databaseoperatorv1alpha1 &quot;github.com/ibm/operator-sample-go/operator-database/api/v1alpha1&quot;
	&quot;k8s.io/apimachinery/pkg/runtime&quot;
	&quot;k8s.io/apimachinery/pkg/runtime/schema&quot;
	&quot;k8s.io/client-go/rest&quot;
	&quot;k8s.io/client-go/tools/clientcmd&quot;
	&quot;sigs.k8s.io/controller-runtime/pkg/client&quot;
	&quot;sigs.k8s.io/controller-runtime/pkg/scheme&quot;
)
func getBackupResource() error {
	config, err := rest.InClusterConfig()
	if err != nil {
		kubeconfig := filepath.Join(
			os.Getenv(&quot;HOME&quot;), &quot;.kube&quot;, &quot;config&quot;,
		)
		fmt.Println(&quot;Using kubeconfig file: &quot;, kubeconfig)
		config, err = clientcmd.BuildConfigFromFlags(&quot;&quot;, kubeconfig)
		if err != nil {
			return err
		}
	}
	var GroupVersion = schema.GroupVersion{Group: &quot;database.sample.third.party&quot;, Version: &quot;v1alpha1&quot;}
	var SchemeBuilder = &amp;scheme.Builder{GroupVersion: GroupVersion}
	var databaseOperatorScheme *runtime.Scheme
	databaseOperatorScheme, err = SchemeBuilder.Build()
  ...  
	err = databaseoperatorv1alpha1.AddToScheme(databaseOperatorScheme)
  ...
	kubernetesClient, err = client.New(config, client.Options{Scheme: databaseOperatorScheme})
  ...
	databaseBackupResource = &amp;databaseoperatorv1alpha1.DatabaseBackup{}
	err = kubernetesClient.Get(applicationContext, types.NamespacedName{Name: backupResourceName, Namespace: namespace}, databaseBackupResource)
  ...
	return nil
}
</pre>
<p>To get an instance of the controller-runtime client, a rest.Config object is needed. When running in clusters, this config can be read via the API rest.InClusterConfig(). When running locally, the config can be read from the local file $Home/.kube/config.</p>
<p>If you want to access resource definitions defined by a controller (other image and other Go package), you can <a href="http://heidloff.net/article/importing-go-modules-kubernetes-operators/" rel="noopener noreferrer" target="_blank">import</a> them. In the example above the custom resource definition &#8216;DatabaseBackup&#8217; from the &#8216;operator-database&#8217; project is used to access database backup resources.</p>
<p>To learn more about operator patterns and best practices, check out the repo <a href="https://github.com/IBM/operator-sample-go" rel="noopener noreferrer" target="_blank">operator-sample-go</a>.</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/accessing-kubernetes-from-go-applications/">Accessing Kubernetes from Go Applications</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></content:encoded>
									<post-id xmlns="com-wordpress:feed-additions:1">5022</post-id>	</item>
		<item>
		<title>Automatically Archiving Data with Kubernetes Operators</title>
		<link>http://heidloff.net/article/automatically-archiving-data-kubernetes-operators/</link>
				<pubDate>Fri, 08 Apr 2022 05:07:19 +0000</pubDate>
		<dc:creator><![CDATA[Niklas Heidloff]]></dc:creator>
				<category><![CDATA[Articles]]></category>

		<guid isPermaLink="false">http://heidloff.net/?p=5018</guid>
				<description><![CDATA[<p>Kubernetes operators allow the automation of day 2 operational tasks. A good example is the automatic archiving of data. This article describes how data from a simple database can be archived automatically in S3 buckets using CronJobs, Jobs and custom resources. The complete source code from this article is available in the ibm/operator-sample-go repo. The [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/automatically-archiving-data-kubernetes-operators/">Automatically Archiving Data with Kubernetes Operators</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p><em>Kubernetes operators allow the automation of day 2 operational tasks. A good example is the automatic archiving of data. This article describes how data from a simple database can be archived automatically in S3 buckets using CronJobs, Jobs and custom resources.</em><span id="more-5018"></span></p>
<p>The complete source code from this article is available in the <a href="https://github.com/IBM/operator-sample-go/tree/43ec9d7e16f97b11ce4aa5b64d2e9a9ce0a9fde9/database-service" rel="noopener noreferrer" target="_blank">ibm/operator-sample-go</a> repo. The repo comes with a simple implementation of a database system which can be deployed on Kubernetes. Data is persisted in JSON files as outlined in the previous article <a href="http://Building Databases on Kubernetes with Quarkus" rel="noopener noreferrer" target="_blank">Building Databases on Kubernetes with Quarkus</a>.</p>
<p>To allow operators to backup data automatically, you need a custom resource definition first which defines when to do backups and where to store the data. We&#8217;ve created a custom resource &#8216;<a href="https://github.com/IBM/operator-sample-go/blob/8ce338d65d2cc9f8db437e3aa635f94a45156922/operator-database/config/samples/database.sample_v1alpha1_databasebackup.yaml" rel="noopener noreferrer" target="_blank">DatabaseBackup</a>&#8216; with this information. We use buckets from IBM Cloud Object Storage.</p>
<pre class="brush: plain; title: ; notranslate">
apiVersion: database.sample.third.party/v1alpha1
kind: DatabaseBackup
metadata:
  name: databasebackup-manual
  namespace: database
spec:
  repos:
  - name: ibmcos-repo
    type: ibmcos
    secretName: ibmcos-repo
    serviceEndpoint: &quot;https://s3.fra.eu.cloud-object-storage.appdomain.cloud&quot;
    authEndpoint: &quot;https://iam.cloud.ibm.com/identity/token&quot;
    bucketNamePrefix: &quot;database-backup-&quot;
  manualTrigger:
    enabled: true
    time: &quot;2022-12-15T02:59:43.1Z&quot;
    repo: ibmcos-repo
  scheduledTrigger:
    enabled: false
    schedule: &quot;0 * * * *&quot;
    repo: ibmcos-repo
</pre>
<p>In order to run the backups on a scheduled basis, we use Kubernetes CronJobs. This makes also sense since the backup tasks can take quite some time for large datasets. The <a href="https://github.com/IBM/operator-sample-go/blob/8ce338d65d2cc9f8db437e3aa635f94a45156922/operator-database-backup/kubernetes/cronjob.yaml" rel="noopener noreferrer" target="_blank">CronJob</a> could be applied manually, but a cleaner design is to let operators do this. Secrets like the HMAC secret should also be moved to Kubernetes secrets (or security tools).</p>
<pre class="brush: plain; title: ; notranslate">
apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-backup
  namespace: database
spec:
  schedule: &quot;0 * * * *&quot;
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: database-backup
            image: docker.io/nheidloff/operator-database-backup:v1.0.7
            imagePullPolicy: IfNotPresent
            env:
            - name: BACKUP_RESOURCE_NAME
              value: &quot;databasebackup-manual&quot;
            - name: NAMESPACE
              value: &quot;database&quot;
            - name: CLOUD_OBJECT_STORAGE_HMAC_ACCESS_KEY_ID
              value: &quot;xxx&quot;
            - name: CLOUD_OBJECT_STORAGE_HMAC_SECRET_ACCESS_KEY
              value: &quot;xxx&quot;
            - name: CLOUD_OBJECT_STORAGE_REGION
              value: &quot;eu-geo&quot;
            - name: CLOUD_OBJECT_STORAGE_SERVICE_ENDPOINT
              value: &quot;s3.eu.cloud-object-storage.appdomain.cloud&quot;
          restartPolicy: OnFailure
</pre>
<p>For testing purposes the following commands can be invoked to trigger a job manually to run immediately. In status.conditions of the database backup resource feedback is provided whether the backup has been successful.</p>
<pre class="brush: plain; title: ; notranslate">
$ kubectl apply -f ../operator-database/config/samples/database.sample_v1alpha1_databasebackup.yaml
$ kubectl apply -f kubernetes/role.yaml
$ kubectl apply -f kubernetes/cronjob.yaml
$ kubectl create job --from=cronjob/database-backup manuallytriggered -n database
$ kubectl get databasebackups databasebackup-manual -n database -oyaml
...
status:
  conditions:
  - lastTransitionTime: &quot;2022-04-07T05:16:30Z&quot;
    message: Database has been archived
    reason: BackupSucceeded
    status: &quot;True&quot;
    type: Succeeded
$ kubectl logs -n database $(kubectl get pods -n database | awk '/manuallytriggered/ {print $1;exit}')
</pre>
<p>These screenshots show the deployed CronJob, Job and Pod.</p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/04/auto-archive1.png" alt="" width="2942" height="1436" class="alignnone size-full wp-image-5015" srcset="http://heidloff.net/wp-content/uploads/2022/04/auto-archive1.png 2942w, http://heidloff.net/wp-content/uploads/2022/04/auto-archive1-300x146.png 300w, http://heidloff.net/wp-content/uploads/2022/04/auto-archive1-768x375.png 768w, http://heidloff.net/wp-content/uploads/2022/04/auto-archive1-1024x500.png 1024w" sizes="(max-width: 2942px) 100vw, 2942px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/04/auto-archive2.png" alt="" width="2946" height="1608" class="alignnone size-full wp-image-5016" srcset="http://heidloff.net/wp-content/uploads/2022/04/auto-archive2.png 2946w, http://heidloff.net/wp-content/uploads/2022/04/auto-archive2-300x164.png 300w, http://heidloff.net/wp-content/uploads/2022/04/auto-archive2-768x419.png 768w, http://heidloff.net/wp-content/uploads/2022/04/auto-archive2-1024x559.png 1024w" sizes="(max-width: 2946px) 100vw, 2946px" /></p>
<p>Data is archived in IBM Cloud Object Storage.</p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/04/auto-archive3.png" alt="" width="2718" height="1346" class="alignnone size-full wp-image-5017" srcset="http://heidloff.net/wp-content/uploads/2022/04/auto-archive3.png 2718w, http://heidloff.net/wp-content/uploads/2022/04/auto-archive3-300x149.png 300w, http://heidloff.net/wp-content/uploads/2022/04/auto-archive3-768x380.png 768w, http://heidloff.net/wp-content/uploads/2022/04/auto-archive3-1024x507.png 1024w" sizes="(max-width: 2718px) 100vw, 2718px" /></p>
<p>The <a href="https://github.com/IBM/operator-sample-go/blob/0b46e5ee18b892293ce2ff2eb565ea9500de298b/operator-database-backup/backup/backup.go" rel="noopener noreferrer" target="_blank">code</a> of the backup job is pretty straight forward. I&#8217;ve implemented a Go image with the following functionality.</p>
<ul>
<li>Get the database backup resource from Kubernetes</li>
<li>Validate input environment variables</li>
<li>Read data from the database system</li>
<li>Write data to object storage</li>
<li>Write status as conditions in database backup resource</li>
</ul>
<p>To learn more about operator patterns and best practices, check out the repo <a href="https://github.com/IBM/operator-sample-go" rel="noopener noreferrer" target="_blank">operator-sample-go</a>.</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/automatically-archiving-data-kubernetes-operators/">Automatically Archiving Data with Kubernetes Operators</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></content:encoded>
									<post-id xmlns="com-wordpress:feed-additions:1">5018</post-id>	</item>
		<item>
		<title>Building Databases on Kubernetes with Quarkus</title>
		<link>http://heidloff.net/quarkus/building-databases-kubernetes-quarkus/</link>
				<pubDate>Thu, 07 Apr 2022 06:29:48 +0000</pubDate>
		<dc:creator><![CDATA[Niklas Heidloff]]></dc:creator>
				<category><![CDATA[Articles]]></category>

		<guid isPermaLink="false">http://heidloff.net/?p=5001</guid>
				<description><![CDATA[<p>While there are plenty of examples how to write stateless applications on Kubernetes, there are relative few simple samples explaining how to write stateful applications. This article describes how to write a simple database system with Quarkus. The complete code of this article can be found in the ibm/operator-sample-go repo. My previous article How to [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/quarkus/building-databases-kubernetes-quarkus/">Building Databases on Kubernetes with Quarkus</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p><em>While there are plenty of examples how to write stateless applications on Kubernetes, there are relative few simple samples explaining how to write stateful applications. This article describes how to write a simple database system with Quarkus.</em><span id="more-5001"></span></p>
<p>The complete code of this article can be found in the <a href="https://github.com/IBM/operator-sample-go/tree/8ce338d65d2cc9f8db437e3aa635f94a45156922/database-service" rel="noopener noreferrer" target="_blank">ibm/operator-sample-go</a> repo.</p>
<p>My previous article <a href="http://heidloff.net/article/how-to-build-your-own-database-on-kubernetes/" rel="noopener noreferrer" target="_blank">How to build your own Database on Kubernetes</a> explains the concepts how stateful workloads can be run on Kubernetes. Before reading on, make sure you understand StatefulSets. To recap, here are the main components.</p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/04/statefulsets1.png" alt="" width="1104" height="678" class="alignnone size-full wp-image-4993" srcset="http://heidloff.net/wp-content/uploads/2022/04/statefulsets1.png 1104w, http://heidloff.net/wp-content/uploads/2022/04/statefulsets1-300x184.png 300w, http://heidloff.net/wp-content/uploads/2022/04/statefulsets1-768x472.png 768w, http://heidloff.net/wp-content/uploads/2022/04/statefulsets1-1024x629.png 1024w" sizes="(max-width: 1104px) 100vw, 1104px" /></p>
<p>Let&#8217;s look at the <a href="https://github.com/IBM/operator-sample-go/blob/8ce338d65d2cc9f8db437e3aa635f94a45156922/database-service/kubernetes/statefulset.yaml" rel="noopener noreferrer" target="_blank">StatefulSet definition</a> first:</p>
<pre class="brush: plain; title: ; notranslate">
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: database-cluster
  namespace: database
  labels:
    app: database-cluster
spec:
  serviceName: database-service
  replicas: 3
  selector:
    matchLabels:
      app: database-cluster
  template:
    metadata:
      labels:
        app: database-cluster
    spec:
      securityContext:
        fsGroup: 2000
      terminationGracePeriodSeconds: 10
      containers:
      - name: database-container
        image: nheidloff/database-service:v1.0.22
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8089
          name: api
        volumeMounts:
        - name: data-volume
          mountPath: /data
        env:
          - name: DATA_DIRECTORY
            value: /data/
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
  volumeClaimTemplates:
  - metadata:
      name: data-volume
    spec:
      accessModes: [ &quot;ReadWriteOnce&quot; ]
      storageClassName: ibmc-vpc-block-5iops-tier
      resources:
        requests:
          storage: 1Mi
</pre>
<p>Notes about the stateful set:</p>
<ul>
<li>There are three replicas: One lead and two followers.</li>
<li>A storage class is used to provision volumes automatically.</li>
<li>Each pod/container has its own volume.</li>
<li>The volume is mounted into the container.</li>
<li>To allow containers to read metadata like their pod names, environment variables are used.</li>
<li>The security context is set to &#8220;fsGroup: 2000&#8221; which allows file access from the Quarkus image.</li>
</ul>
<p>To access the pods, a <a href="https://github.com/IBM/operator-sample-go/blob/8ce338d65d2cc9f8db437e3aa635f94a45156922/database-service/kubernetes/service.yaml" rel="noopener noreferrer" target="_blank">service is defined</a>. For example the leader can be invoked via &#8220;http://database-cluster-0.database-service.database:8089/persons&#8221;.</p>
<pre class="brush: plain; title: ; notranslate">
apiVersion: v1
kind: Service
metadata:
  labels:
    app: database-service
  name: database-service
  namespace: database
spec:
  clusterIP: None
  ports:
  - port: 8089
  selector:
    app: database-cluster
</pre>
<p>The database service uses a single <a href="https://github.com/IBM/operator-sample-go/blob/8ce338d65d2cc9f8db437e3aa635f94a45156922/database-service/data.json" rel="noopener noreferrer" target="_blank">JSON file</a> for storage. For the leader the file is created when the leader is initialized. Followers <a href="https://github.com/IBM/operator-sample-go/blob/8ce338d65d2cc9f8db437e3aa635f94a45156922/database-service/src/main/java/heidloff/net/database/DataSynchronization.java#L18" rel="noopener noreferrer" target="_blank">synchronize</a> the data from the leader when they are initialized.</p>
<pre class="brush: plain; title: ; notranslate">
public static Response synchronizeDataFromLeader(LeaderUtils leaderUtils, PersonResource personResource) {
    System.out.println(&quot;LeaderUtils.synchronizeDataFromLeader()&quot;);
    String leaderAddress = &quot;http://database-cluster-0.database-service.database:8089/persons&quot;;
    int httpStatus = 200; 
    if (leaderUtils.isLeader() == true) {
        httpStatus = 501; // Not Implemented
    } else {
        Set&lt;Person&gt; persons = null;
        try {
            // Note: This follower should update from the previous follower (or leader)
            // For simplification purposes updates are only read from the leader
            URL apiUrl = new URL(leaderAddress);
            System.out.println(&quot;Leader found. URL: &quot; + leaderAddress);
            RemoteDatabaseService customRestClient = RestClientBuilder.newBuilder().baseUrl(apiUrl).
                register(ExceptionMapper.class).build(RemoteDatabaseService.class);
            persons = customRestClient.getAll();                
        } catch (Exception e) {
            System.out.println(&quot;/persons could not be invoked&quot;);
            httpStatus = 503; // Service Unavailable
        }
        if (persons != null) {
            try {
                personResource.updateAllPersons(persons);    
            } catch (RuntimeException e) {
                System.out.println(&quot;Data could not be written&quot;);
                httpStatus = 503; // Service Unavailable
            }                
        }
    }
    return Response.status(httpStatus).build();    
}
</pre>
<p>Write operations are only allowed on the leader. When they are executed on the leader, the followers need to be notified to update their state (see <a href="https://github.com/IBM/operator-sample-go/blob/8ce338d65d2cc9f8db437e3aa635f94a45156922/database-service/src/main/java/heidloff/net/database/DataSynchronization.java#L52" rel="noopener noreferrer" target="_blank">code</a>).</p>
<pre class="brush: plain; title: ; notranslate">
public static void notifyFollowers() {
    KubernetesClient client = new DefaultKubernetesClient();        
    String serviceName = &quot;database-service&quot;;
    String namespace = System.getenv(&quot;NAMESPACE&quot;);     
    PodList podList = client.pods().inNamespace(namespace).list();
    podList.getItems().forEach(pod -&gt; {
        if (pod.getMetadata().getName().endsWith(&quot;-0&quot;) == false) {
            String followerAddress =  pod.getMetadata().getName() + &quot;.&quot; + serviceName + &quot;.&quot; + namespace + &quot;:8089&quot;;
            System.out.println(&quot;Follower found: &quot; + pod.getMetadata().getName() + &quot; - &quot; + followerAddress);
            try {
                URL apiUrl = new URL(&quot;http://&quot; + followerAddress + &quot;/api/onleaderupdated&quot;);
                RemoteDatabaseService customRestClient = RestClientBuilder.newBuilder().
                register(ExceptionMapper.class).baseUrl(apiUrl).build(RemoteDatabaseService.class);
                customRestClient.onLeaderUpdated();              
            } catch (Exception e) { 
                System.out.println(&quot;/onleaderupdated could not be invoked&quot;);
            }
        }
    });
}
</pre>
<p>The next question is how the leader is determined. In this <a href="https://github.com/IBM/operator-sample-go/blob/8ce338d65d2cc9f8db437e3aa635f94a45156922/database-service/src/main/java/heidloff/net/database/LeaderUtils.java#L88" rel="noopener noreferrer" target="_blank">sample</a> a simple mechanism is used which is to check whether the container&#8217;s pod name ends with &#8220;-0&#8221;.</p>
<pre class="brush: plain; title: ; notranslate">
public void electLeader() {     
    String podName = System.getenv(&quot;POD_NAME&quot;);
    if ((podName != null) &amp;&amp; (podName.endsWith(&quot;-0&quot;))) {
        setLeader(true);
    }
}
</pre>
<p>The state of all pods is stored on the volumes too (<a href="https://github.com/IBM/operator-sample-go/blob/8ce338d65d2cc9f8db437e3aa635f94a45156922/database-service/podstate.json" rel="noopener noreferrer" target="_blank">podstate.json</a>) so that the new pods can continue with the state previous pod instances left off.</p>
<p>To simulate a real database system, the database application has <a href="https://github.com/IBM/operator-sample-go/blob/8ce338d65d2cc9f8db437e3aa635f94a45156922/database-service/src/main/java/heidloff/net/database/API.java" rel="noopener noreferrer" target="_blank">SQL-like APIs</a> to execute statements and queries.</p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-07-at-08.18.07.png" alt="" width="1958" height="956" class="alignnone size-full wp-image-5010" srcset="http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-07-at-08.18.07.png 1958w, http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-07-at-08.18.07-300x146.png 300w, http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-07-at-08.18.07-768x375.png 768w, http://heidloff.net/wp-content/uploads/2022/04/Screenshot-2022-04-07-at-08.18.07-1024x500.png 1024w" sizes="(max-width: 1958px) 100vw, 1958px" /></p>
<p>To learn more, check out the complete <a href="https://github.com/IBM/operator-sample-go/tree/8ce338d65d2cc9f8db437e3aa635f94a45156922/database-service" rel="noopener noreferrer" target="_blank">source code</a>.</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/quarkus/building-databases-kubernetes-quarkus/">Building Databases on Kubernetes with Quarkus</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></content:encoded>
									<post-id xmlns="com-wordpress:feed-additions:1">5001</post-id>	</item>
		<item>
		<title>How to build your own Database on Kubernetes</title>
		<link>http://heidloff.net/article/how-to-build-your-own-database-on-kubernetes/</link>
				<pubDate>Wed, 06 Apr 2022 06:56:48 +0000</pubDate>
		<dc:creator><![CDATA[Niklas Heidloff]]></dc:creator>
				<category><![CDATA[Articles]]></category>

		<guid isPermaLink="false">http://heidloff.net/?p=4990</guid>
				<description><![CDATA[<p>Kubernetes supports running stateless and stateful workloads. This article describes the core concepts how to build and run a simple database on Kubernetes using an open source sample. The snippets below are part of the ibm/operator-sample-go repo which describes patterns and best practices how to build operators. A key benefit of operators is the automation [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/how-to-build-your-own-database-on-kubernetes/">How to build your own Database on Kubernetes</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p><em>Kubernetes supports running stateless and stateful workloads. This article describes the core concepts how to build and run a simple database on Kubernetes using an open source sample.</em><span id="more-4990"></span></p>
<p>The snippets below are part of the <a href="https://github.com/IBM/operator-sample-go/tree/main/database-service" rel="noopener noreferrer" target="_blank">ibm/operator-sample-go</a> repo which describes patterns and best practices how to build operators. A key benefit of operators is the automation of day 2 tasks like the management of stateful applications. For example operators can act as an auto-pilot to automatically run backups for databases. In order to demonstrate this, I&#8217;ve built a simple database sample.</p>
<p>The key concept to build stateful applications are StatefulSets. Check out the videos below, especially the first one, that describe this Kubernetes capability.</p>
<ul>
<li><a href="https://youtu.be/pPQKAR1pA9U" rel="noopener noreferrer" target="_blank">Kubernetes StatefulSet simply explained | Deployment vs StatefulSet</a></li>
<li><a href="https://youtu.be/nyUe-3zmHRc" rel="noopener noreferrer" target="_blank">A Kubernetes Operator for etcd</a></li>
</ul>
<p>Here is a summary of the first video:</p>
<ul>
<li>Pods have identities, for example database-cluster-0</li>
<li>Pods are created and deleted after each other</li>
<li>Each pod has it&#8217;s own PVC and PV or StorageClass</li>
<li>Data will survive when all pods die</li>
<li>Pod state is stored on volumes to allow pod recreations</li>
<li>One leader and multiple followers</li>
<li>Only the leader can write</li>
<li>Followers need to synchronize data from leader</li>
<li>Pods have fixed individual DNS names</li>
</ul>
<p>This diagram shows the involved components in my sample database.</p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/04/statefulsets1.png" alt="" width="1104" height="678" class="alignnone size-full wp-image-4993" srcset="http://heidloff.net/wp-content/uploads/2022/04/statefulsets1.png 1104w, http://heidloff.net/wp-content/uploads/2022/04/statefulsets1-300x184.png 300w, http://heidloff.net/wp-content/uploads/2022/04/statefulsets1-768x472.png 768w, http://heidloff.net/wp-content/uploads/2022/04/statefulsets1-1024x629.png 1024w" sizes="(max-width: 1104px) 100vw, 1104px" /></p>
<p>Here are screenshots of the deployed database application.</p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/04/statefulsets2.png" alt="" width="2266" height="1512" class="alignnone size-full wp-image-4994" srcset="http://heidloff.net/wp-content/uploads/2022/04/statefulsets2.png 2266w, http://heidloff.net/wp-content/uploads/2022/04/statefulsets2-300x200.png 300w, http://heidloff.net/wp-content/uploads/2022/04/statefulsets2-768x512.png 768w, http://heidloff.net/wp-content/uploads/2022/04/statefulsets2-1024x683.png 1024w" sizes="(max-width: 2266px) 100vw, 2266px" /></p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/04/statefulsets3.png" alt="" width="2644" height="646" class="alignnone size-full wp-image-4995" srcset="http://heidloff.net/wp-content/uploads/2022/04/statefulsets3.png 2644w, http://heidloff.net/wp-content/uploads/2022/04/statefulsets3-300x73.png 300w, http://heidloff.net/wp-content/uploads/2022/04/statefulsets3-768x188.png 768w, http://heidloff.net/wp-content/uploads/2022/04/statefulsets3-1024x250.png 1024w" sizes="(max-width: 2644px) 100vw, 2644px" /></p>
<p>The database is very simple. It stores all data in one JSON file. The <a href="https://github.com/IBM/operator-sample-go/blob/433655ed56fe4408b83b8ec033ba1176a3b7b72b/database-service/data.json" rel="noopener noreferrer" target="_blank">file</a> contains a list of persons with first and last names.</p>
<pre class="brush: plain; title: ; notranslate">
[
    {
        &quot;firstName&quot;: &quot;Niklas&quot;,
        &quot;lastName&quot;: &quot;Heidloff&quot;,
        &quot;id&quot;: &quot;e0a08c5b-62d5-4b20-a024-e1c270d901c2&quot;
    },
    {
        &quot;firstName&quot;: &quot;Adam&quot;,
        &quot;lastName&quot;: &quot;Deleeuw&quot;,
        &quot;id&quot;: &quot;93115462-543c-4149-9b75-2b1a84bd326c&quot;
    },
    {
        &quot;firstName&quot;: &quot;Thomas&quot;,
        &quot;lastName&quot;: &quot;Suedbroecker&quot;,
        &quot;id&quot;: &quot;dd35e011-093b-4c63-9d54-040a5dc3d28f&quot;
    },
    {
        &quot;firstName&quot;: &quot;Alain&quot;,
        &quot;lastName&quot;: &quot;Airom&quot;,
        &quot;id&quot;: &quot;918b0da0-afda-4cbf-a370-0347a6ede98e&quot;
    }
]
</pre>
<p>Let&#8217;s take a look at the <a href="https://github.com/IBM/operator-sample-go/blob/433655ed56fe4408b83b8ec033ba1176a3b7b72b/database-service/README.md#testing-apis-on-kubernetes" rel="noopener noreferrer" target="_blank">behaviour</a> of the database. After the stateful set has been deployed, there will be three pods. database-cluster-0 is the leader, database-cluster-1 and database-cluster-2 are the followers. It takes some time for the pods to come up, since they are started after each other and since they need to bind and potentially create volumes.</p>
<pre class="brush: plain; title: ; notranslate">
$ kubectl exec -n database database-cluster-1 -- curl -s http://localhost:8089/persons
$ kubectl exec -n database database-cluster-1 -- curl -s http://localhost:8089/api/leader
$ kubectl logs -n database database-cluster-1
$ kubectl exec -n database database-cluster-1 -- curl -s -X 'POST' 'http://localhost:8089/persons' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{&quot;firstName&quot;: &quot;Johanna&quot;,&quot;lastName&quot;: &quot;Koester&quot;,&quot;id&quot;: &quot;e956b5d0-fa0c-40e8-9da9-333c214dcaf7&quot;}'
$ kubectl exec -n database database-cluster-1 -- curl -s http://localhost:8089/persons
</pre>
<p>The /persons endpoint for &#8216;1&#8217; returns all four initial persons. The follower &#8216;1&#8217; received the data from the leader when it started. The attempt to create a new person fails, since only the leader can write.</p>
<p>The same write operation works, if executed on the leader &#8216;0&#8217;. After this, the data will be synchronized to all followers again.</p>
<pre class="brush: plain; title: ; notranslate">
$ kubectl exec -n database database-cluster-0 -- curl -s http://localhost:8089/persons
$ kubectl exec -n database database-cluster-0 -- curl -s http://localhost:8089/api/leader
$ kubectl logs -n database database-cluster-0
$ kubectl exec -n database database-cluster-0 -- curl -s -X 'POST' 'http://localhost:8089/persons' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{&quot;firstName&quot;: &quot;Johanna&quot;,&quot;lastName&quot;: &quot;Koester&quot;,&quot;id&quot;: &quot;e956b5d0-fa0c-40e8-9da9-333c214dcaf7&quot;}'
$ kubectl exec -n database database-cluster-0 -- curl -s http://localhost:8089/persons
$ kubectl exec -n database database-cluster-1 -- curl -s http://localhost:8089/persons
</pre>
<p>When the leader &#8216;0&#8217; goes down, the data remains on the volume. The stateless set will automatically start a new pod with the same name &#8216;0&#8217; which marks the pod as leader. The new pod &#8216;0&#8217; will bind the existing volume.</p>
<pre class="brush: plain; title: ; notranslate">
$ kubectl delete pod database-cluster-0 -n database
$ kubectl exec -n database database-cluster-0 -- curl -s http://localhost:8089/persons
</pre>
<p>When adding more pods, the new pods read the data from other pods when they are started.</p>
<pre class="brush: plain; title: ; notranslate">
$ kubectl scale statefulsets database-cluster --replicas=3 -n database
$ kubectl exec -n database database-cluster-2 -- curl -s http://localhost:8089/persons
</pre>
<p>I&#8217;ll blog in more detail how I&#8217;ve implemented this. For now check out the <a href="https://github.com/IBM/operator-sample-go" rel="noopener noreferrer" target="_blank">repo</a>. </p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/how-to-build-your-own-database-on-kubernetes/">How to build your own Database on Kubernetes</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></content:encoded>
									<post-id xmlns="com-wordpress:feed-additions:1">4990</post-id>	</item>
	</channel>
</rss>