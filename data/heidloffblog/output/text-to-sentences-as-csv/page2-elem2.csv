page2-elem2,Understanding TechZone Toolkit GitOps Modules.
page2-elem2,With the TechZone Accelerator Toolkit IBM software open source projects and custom applications can easily be deployed to various clouds.
page2-elem2,This article explains how to deploy resources in Kubernetes clusters via GitOps.
page2-elem2,Check out my earlier blog that introduces the toolkit: Introducing IBM’s Toolkit to handle Everything as Code [http://heidloff.net/article/introducing-ibms-toolkit-to-handle-everything-as-code/].
page2-elem2,The toolkit leverages Terrafrom and GitOps and is based on best practices from IBM projects with partners and clients.
page2-elem2,With the toolkit both infrastructure like Kubernetes clusters as well as Kubernetes resources within clusters can be deployed.
page2-elem2,Infrastructure resources are deployed via Terraform resources within clusters via Argo CD.
page2-elem2,To deploy resources in Kubernetes clusters DevOps modules are used which can be found in the TechZone Module Catalog [https://modules.cloudnativetoolkit.dev/].
page2-elem2,The TechZone Toolkit uses Argo CD for GitOps which is deployed automatically.
page2-elem2,Argo CD requires a Git repo to store the desired state which it continuously synchronizes with the actual state in the cluster.
page2-elem2,Read my blog Deploying Kubernetes Resources via GitOps [http://heidloff.net/article/deploying-kubernetes-resources-via-gitops/] for an introduction to GitOps.
page2-elem2,Let’s look how the toolkit works for a concrete sample [https://github.com/ibm/watson-automation] where Watson NLP is deployed to OpenShift via GitOps.
page2-elem2,First you define the modules argocd-bootstrap and gitops-repo in the BOM (bill of material).
page2-elem2,apiVersion: cloudnativetoolkit.dev/v1alpha1
page2-elem2,kind: BillOfMaterial
page2-elem2,metadata:
page2-elem2,name: cluster-with-watson-nlp
page2-elem2,spec:
page2-elem2,modules:
page2-elem2,- name: ibm-ocp-vpc
page2-elem2,- name: argocd-bootstrap
page2-elem2,- name: gitops-repo
page2-elem2,- name: terraform-gitops-ubi
page2-elem2,- name: terraform-gitops-watson-nlp
page2-elem2,To configure the GitOps module change the configuration in variables.yaml [https://github.com/IBM/watson-automation/blob/main/roks-new-nlp/output/cluster-with-watson-nlp/variables-template.yaml#L31-L42].
page2-elem2,# gitops
page2-elem2,- name: gitops_repo_repo
page2-elem2,description: The name of the gitops repository that will be created
page2-elem2,value: xxx
page2-elem2,- name: gitops_repo_host
page2-elem2,value: github.com
page2-elem2,- name: gitops_repo_org
page2-elem2,value: xxx
page2-elem2,- name: gitops_repo_username
page2-elem2,value: xxx
page2-elem2,After applying the Terraform modules a GitOps repo will be created with a specific structure [https://github.com/cloud-native-toolkit/terraform-tools-gitops/tree/main/template] that the toolkit expects.
page2-elem2,There are two major types of resources in these repos:
page2-elem2,1.
page2-elem2,ArgoCD configuration
page2-elem2,2.
page2-elem2,Application ‘payloads’
page2-elem2,ArgoCD configuration
page2-elem2,In Argo CD collections of kubernetes resources that are deployed together are called “applications”.
page2-elem2,Applications in ArgoCD are configured using a custom resource definition (CRD) in the cluster which means ArgoCD applications can deploy other ArgoCD applications (called the ‘App of Apps pattern [https://argoproj.github.io/argo-cd/operator-manual/cluster-bootstrapping/#app-of-apps-pattern]‘).
page2-elem2,With this pattern the Argo CD environment can be bootstrapped with an initial application.
page2-elem2,That initial bootstrap application can then be updated in the GitOps repository to configure other applications.
page2-elem2,Application ‘payloads’
page2-elem2,The ArgoCD configuration points to other paths within the GitOps repository that contain the actual “payload” yaml to provision the applications (the deployments config maps etc that make up the applications).
page2-elem2,In addition to separating the Argo CD configuration from the application ‘payloads’ the configuration has also been divided into three different layers of the cluster configuration:
page2-elem2,1.
page2-elem2,Infrastructure: Foundational elements within the cluster like namespaces service accounts role-based access control etc. These resources are often managed by the infrastructure team and are required by the other resources.
page2-elem2,2.
page2-elem2,Shared services: Shared services are application components that are used across multiple applications or across the cluster.
page2-elem2,Often these are operator-based services and managed independently from the applications.
page2-elem2,3.
page2-elem2,Applications: The application layer contains the applications deployed to the cluster using the infrastructure and shared service components.
page2-elem2,Let’s look at the Watson NLP GitOps module example.
page2-elem2,In the directory ‘argocd/2-services’ the source of the Argo CD application is defined which resides in the same repo in the ‘payload/2-services’ directory.
page2-elem2,Helm is used for the actual deployment of the Watson NLP resources.
page2-elem2,Helm is the preferred solution of the toolkit since it allows easy configurations for different environments based on its built-in templating mechanism.
page2-elem2,The Argo CD dashboard shows the registered applications and their synchronization states.
page2-elem2,Additionally the dashboard shows for each application which Kubernetes resources have been deployed.
page2-elem2,To change deployments you can simply change the configuration in the GitOps repo for example to update to a later version of Watson NLP.
page2-elem2,Argo CD will be triggered automatically to synchronize the desired state with the actual state.
page2-elem2,To find out more about these capabilities check out the following resources:
page2-elem2,* TechZone Accelerator Toolkit Documentation [https://operate.cloudnativetoolkit.dev/]
page2-elem2,* TechZone Accelerator Toolkit Modules [https://operate.cloudnativetoolkit.dev/]
page2-elem2,* TechZone Accelerator Toolkit CLI (iascable) [https://github.com/cloud-native-toolkit/iascable]
page2-elem2,* Sample GitOps Module: UBI [https://github.com/cloud-native-toolkit/terraform-gitops-ubi]
page2-elem2,* Sample GitOps Module: Watson NLP [https://github.com/cloud-native-toolkit/terraform-gitops-watson-nlp]
page2-elem2,* Sample BOMs to deploy Watson NLP [https://github.com/IBM/watson-automation]
page2-elem2,The post Understanding TechZone Toolkit GitOps Modules [http://heidloff.net/article/understanding-techzone-toolkit-gitops-modules/] appeared first on Niklas Heidloff [http://heidloff.net].