<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"><channel><title>Page 2 – Niklas Heidloff</title><atom:link href="http://heidloff.net/feed/?paged=2" rel="self" type="application/rss+xml"/><link>http://heidloff.net</link><description/><lastBuildDate>
	Thu, 24 Nov 2022 10:47:53 +0000	</lastBuildDate><language>en-US</language><sy:updatePeriod>
	hourly	</sy:updatePeriod><sy:updateFrequency>
	1	</sy:updateFrequency><generator>https://wordpress.org/?v=5.1.15</generator><site xmlns="com-wordpress:feed-additions:1">102773794</site><item><title>Developing TechZone Toolkit GitOps Modules with Helm</title><link>http://heidloff.net/article/developing-techzone-toolkit-gitops-modules-with-helm/</link><pubDate>Thu, 17 Nov 2022 00:51:05 +0000</pubDate><dc:creator><![CDATA[Niklas Heidloff]]></dc:creator><category><![CDATA[Articles]]></category><guid isPermaLink="false">http://heidloff.net/?p=5313</guid><description><![CDATA[<p>With the TechZone Accelerator Toolkit IBM software, open source projects and custom applications can easily be deployed to various clouds. This article provides an overview how to develop your own GitOps modules to deploy resources to Kubernetes via Helm. Check out my earlier blog that introduces the toolkit: Introducing IBM’s Toolkit to handle Everything as [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/developing-techzone-toolkit-gitops-modules-with-helm/">Developing TechZone Toolkit GitOps Modules with Helm</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></description><content:encoded><![CDATA[<p><em>With the TechZone Accelerator Toolkit IBM software, open source projects and custom applications can easily be deployed to various clouds. This article provides an overview how to develop your own GitOps modules to deploy resources to Kubernetes via Helm.<br />
</em><span id="more-5313"></span></p>
<p>Check out my earlier blog that introduces the toolkit: <a href="http://heidloff.net/article/introducing-ibms-toolkit-to-handle-everything-as-code/" rel="noopener noreferrer" target="_blank">Introducing IBM’s Toolkit to handle Everything as Code</a>. The toolkit leverages Terrafrom and GitOps and is based on best practices from IBM projects with partners and clients. With the toolkit both infrastructure like Kubernetes clusters as well as Kubernetes resources within clusters can be deployed. Infrastructure resources are deployed via Terraform, resources within clusters via Argo CD. </p>
<p>This article explains how <a href="https://helm.sh/" rel="noopener noreferrer" target="_blank">Helm</a> can be used in the TechZone Toolkit to deploy resources to Kubernetes or OpenShift clusters with Argo CD. Helm is a popular package manager for Kubernetes. In the context of the toolkit Helm is the preferred option to deploy Kubernetes resources. Alternatively you could deploy Kubernetes resources directly via yaml files. However, the advantage of Helm is that it can easily be configured for different environments via its built-in templating mechanism. Another advantage of Helm in this context is that Terraform variables can easily be mapped to Helm values which is described below.</p>
<p>To understand the following content, I suggest to read these documents that give some background:</p>
<ul>
<li>Blog: <a href="http://heidloff.net/article/deploying-kubernetes-resources-via-gitops/" rel="noopener noreferrer" target="_blank">Deploying Kubernetes Resources via GitOps</a></li>
<li>Blog: <a href="http://heidloff.net/article/understanding-techzone-toolkit-gitops-modules/" rel="noopener noreferrer" target="_blank">Understanding TechZone Toolkit GitOps Modules</a></li>
<li>Red Hat blog: <a href="https://cloud.redhat.com/blog/continuous-delivery-with-helm-and-argo-cd" rel="noopener noreferrer" target="_blank">Continuous Delivery with Helm and Argo CD</a></li>
<li>Argo CD documentation: <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/helm/" rel="noopener noreferrer" target="_blank">Helm</a></li>
<li>Toolkit documentation: <a href="https://github.com/cloud-native-toolkit/site-operator-guide/blob/bed61cb15079cc998ec49a15454de4d671c6ad42/docs/learn/iascable/lab4/index.md" rel="noopener noreferrer" target="_blank">Develop an own GitOps module</a></li>
</ul>
<p>Let&#8217;s look at a concrete example. We developed a <a href="https://github.com/cloud-native-toolkit/terraform-gitops-watson-nlp" rel="noopener noreferrer" target="_blank">TechZone Toolkit GitOps module to deploy Watson NLP</a>. The repo of the module includes the Helm chart. The chart expects <a href="https://github.com/IBM/watson-automation/blob/0ba8ec48a8c3695b717db9ca55217706e44ecb0f/helm-nlp/values.yaml" rel="noopener noreferrer" target="_blank">values</a> in the following format, for example to define which NLP models and versions you want to deploy.</p>
<pre class="brush: plain; title: ; notranslate">
componentName: watson-nlp
acceptLicense: false
serviceType: ClusterIP
imagePullSecrets:
  - ibm-entitlement-key
registries:
  - name: watson
    url: cp.icr.io/cp/ai
runtime:
  registry: watson
  image: watson-nlp-runtime:1.0.15
models:
  - registry: watson
    image: watson-nlp_syntax_izumo_lang_en_stock:1.0.5
</pre>
<p>To allow Argo CD to deploy Watson NLP via the Helm, the Helm chart itself as well as the specific values.yaml file need to be put in the GitOps repo.</p>
<p><img src="http://heidloff.net/wp-content/uploads/2022/11/Screenshot-2022-11-14-at-11.46.31.png" alt="" width="2424" height="1578" class="alignnone size-full wp-image-5324" style="border: 1px solid #ddd;" srcset="http://heidloff.net/wp-content/uploads/2022/11/Screenshot-2022-11-14-at-11.46.31.png 2424w, http://heidloff.net/wp-content/uploads/2022/11/Screenshot-2022-11-14-at-11.46.31-300x195.png 300w, http://heidloff.net/wp-content/uploads/2022/11/Screenshot-2022-11-14-at-11.46.31-768x500.png 768w, http://heidloff.net/wp-content/uploads/2022/11/Screenshot-2022-11-14-at-11.46.31-1024x667.png 1024w" sizes="(max-width: 2424px) 100vw, 2424px" /></p>
<p>GitOps modules are just Terraform modules, but follow additional conventions defined by the toolkit to access the automatically provisioned GitOps repo. Input variables of Terraform (GitOps) modules can be defined in <a href="https://github.com/cloud-native-toolkit/terraform-gitops-watson-nlp/blob/4c22e5bba2023602bdd8e4a1a1634b4d024ee937/variables.tf" rel="noopener noreferrer" target="_blank">variables.tf</a>.</p>
<p>To enable the toolkit to put the chart as well as the values into the Git repo, the following steps are necessary. First the Terraform input variables are converted to Helm values into JSON format in <a href="https://github.com/cloud-native-toolkit/terraform-gitops-watson-nlp/blob/4c22e5bba2023602bdd8e4a1a1634b4d024ee937/main.tf#L7-L50" rel="noopener noreferrer" target="_blank">main.tf</a>.</p>
<pre class="brush: plain; title: ; notranslate">
values_content = {
    &quot;componentName&quot; = &quot;embedded&quot;
    &quot;acceptLicense&quot; = var.accept_license
    &quot;serviceType&quot; = &quot;ClusterIP&quot;
    &quot;registries&quot; = var.registries
    &quot;imagePullSecrets&quot; = var.imagePullSecrets
    &quot;runtime&quot; = {
      &quot;registry&quot;: var.runtime_registry
      &quot;image&quot;: var.runtime_image
    }
    &quot;models&quot; = var.models
  }
  layer = &quot;services&quot;
  ...
}

resource null_resource create_yaml {
  provisioner &quot;local-exec&quot; {
    command = &quot;${path.module}/scripts/create-yaml.sh '${local.name}' '${local.yaml_dir}'&quot;
    environment = {
      VALUES_CONTENT = yamlencode(local.values_content)
    }
  }
}
</pre>
<p>After this the chart and the values are copied into the &#8216;services&#8217; payload directory via a <a href="https://github.com/cloud-native-toolkit/terraform-gitops-watson-nlp/blob/4c22e5bba2023602bdd8e4a1a1634b4d024ee937/scripts/create-yaml.sh" rel="noopener noreferrer" target="_blank">script</a>.</p>
<pre class="brush: plain; title: ; notranslate">
#!/usr/bin/env bash
SCRIPT_DIR=$(cd $(dirname &quot;$0&quot;); pwd -P)
MODULE_DIR=$(cd &quot;${SCRIPT_DIR}/..&quot;; pwd -P)
CHART_DIR=$(cd &quot;${MODULE_DIR}/chart/watson-nlp&quot;; pwd -P)
DEST_DIR=&quot;$2&quot; 

## Add logic here to put the yaml resource content in DEST_DIR
mkdir -p &quot;${DEST_DIR}&quot;
cp -R &quot;${CHART_DIR}/&quot;* &quot;${DEST_DIR}&quot;

if [[ -n &quot;${VALUES_CONTENT}&quot; ]]; then
  echo &quot;${VALUES_CONTENT}&quot; &gt; &quot;${DEST_DIR}/values.yaml&quot;
fi
find &quot;${DEST_DIR}&quot; -name &quot;*&quot;
echo &quot;Files in output path&quot;
ls -l &quot;${DEST_DIR}&quot;
</pre>
<p>After the toolkit module has been deployed, you&#8217;ll find everything in your own GitOps repo as shown in the screenshot above. The values.yaml file does not contain the default chart values, but the input variables of your Terraform module.</p>
<p>To change deployments you can simply change the configuration in the GitOps repo, for example to update to a later version of Watson NLP. Argo CD will be triggered automatically to synchronize the desired state with the actual state.</p>
<p><strong>Combination of Terraform and Argo CD</strong></p>
<p>As you&#8217;ve seen, the TechZone Toolkit uses a combination of Terraform and Argo CD. Initially Terraform takes the lead to deploy infrastructure components like VPCs, Kubernetes clusters, Argo CD within clusters and GitOps repos. After this Argo CD is triggered to deploy the initial version of resources as defined in the GitOps repos.</p>
<p>However, after the initial deployments Argo CD takes over the lead. To deploy newer versions of Kubernetes resources, changes can simply be push to Git. When the same Terraform modules are invoked later, for example to deploy more infrastructure components, the toolkit does not modify the already deployed Git repo!</p>
<p>To find out more about these capabilities, check out the following resources:</p>
<ul>
<li><a href="https://operate.cloudnativetoolkit.dev/" rel="noopener noreferrer" target="_blank">TechZone Accelerator Toolkit Documentation</a></li>
<li><a href="https://operate.cloudnativetoolkit.dev/" rel="noopener noreferrer" target="_blank">TechZone Accelerator Toolkit Modules</a></li>
<li><a href="https://github.com/cloud-native-toolkit/iascable" rel="noopener noreferrer" target="_blank">TechZone Accelerator Toolkit CLI (iascable)</a></li>
<li><a href="https://github.com/cloud-native-toolkit/terraform-gitops-ubi" rel="noopener noreferrer" target="_blank">Sample GitOps Module: UBI</a></li>
<li><a href="https://github.com/cloud-native-toolkit/terraform-gitops-watson-nlp" rel="noopener noreferrer" target="_blank">Sample GitOps Module: Watson NLP</a></li>
<li><a href="https://github.com/IBM/watson-automation" rel="noopener noreferrer" target="_blank">Sample BOMs to deploy Watson NLP</a></li>
</ul>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/developing-techzone-toolkit-gitops-modules-with-helm/">Developing TechZone Toolkit GitOps Modules with Helm</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></content:encoded><post-id xmlns="com-wordpress:feed-additions:1">5313</post-id></item></channel></rss>