<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"><channel><title>Page 5 – Niklas Heidloff</title><atom:link href="http://heidloff.net/feed/?paged=5" rel="self" type="application/rss+xml"/><link>http://heidloff.net</link><description/><lastBuildDate>
	Thu, 24 Nov 2022 10:47:53 +0000	</lastBuildDate><language>en-US</language><sy:updatePeriod>
	hourly	</sy:updatePeriod><sy:updateFrequency>
	1	</sy:updateFrequency><generator>https://wordpress.org/?v=5.1.15</generator><site xmlns="com-wordpress:feed-additions:1">102773794</site><item><title>Initialization and Validation Webhooks in Operators</title><link>http://heidloff.net/article/developing-initialization-validation-webhooks-kubernetes-operators/</link><pubDate>Mon, 28 Mar 2022 06:26:59 +0000</pubDate><dc:creator><![CDATA[Niklas Heidloff]]></dc:creator><category><![CDATA[Articles]]></category><guid isPermaLink="false">http://heidloff.net/?p=4902</guid><description><![CDATA[<p>When developing custom Kubernetes resources, static defaults and simple validations for resource properties can be defined in OpenAPI/JSON schemas. For more flexible scenarios webhooks can be used to initialize and validate resources with Go code. In the easiest case defaults and validations can be defined via Kubebuilder annotations directly in the Go code of the [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/developing-initialization-validation-webhooks-kubernetes-operators/">Initialization and Validation Webhooks in Operators</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></description><content:encoded><![CDATA[<p><em>When developing custom Kubernetes resources, static defaults and simple validations for resource properties can be defined in OpenAPI/JSON schemas. For more flexible scenarios webhooks can be used to initialize and validate resources with Go code.</em><span id="more-4902"></span></p>
<p>In the easiest case defaults and validations can be defined via Kubebuilder annotations directly in the Go <a href="https://github.com/IBM/operator-sample-go/blob/a449303076310bc99e3595c1904e6aeb6ee03b87/operator-application/api/v1beta1/application_types.go" rel="noopener noreferrer" target="_blank">code</a> of the custom resource definition, for example:</p>
<pre class="brush: plain; title: ; notranslate">
type ApplicationSpec struct {
  //+kubebuilder:default:=&quot;1.0.0&quot;
  Version string `json:&quot;version,omitempty&quot;`
  //+kubebuilder:validation:Minimum=0
  //+kubebuilder:default:=1
  AmountPods int32 `json:&quot;amountPods&quot;`
  // +kubebuilder:default:=&quot;database&quot;
  DatabaseName string `json:&quot;databaseName,omitempty&quot;`
  // +kubebuilder:default:=&quot;databaseNamespace&quot;
  DatabaseNamespace string `json:&quot;databaseNamespace,omitempty&quot;`
  // +kubebuilder:default:=&quot;https://raw.githubusercontent.com/IBM/multi-tenancy/main/my.sql&quot;
  SchemaUrl string `json:&quot;schemaUrl,omitempty&quot;`
  Title string `json:&quot;title`
}
</pre>
<p>Read the <a href="https://book.kubebuilder.io/reference/markers/crd-validation.html" rel="noopener noreferrer" target="_blank">Kubebuilder documentation</a> for more details.</p>
<p>Additionally webhooks can be implemented as part of Kubernetes operators which are executed before custom resources are created, updated and deleted. The implementation of these webhooks is straight forward. The setup of the webhooks is a little bit more tricky. Check out my earlier blog <a href="http://heidloff.net/article/configuring-webhooks-kubernetes-operators/" rel="noopener noreferrer" target="_blank">Configuring Webhooks for Kubernetes Operators</a>.</p>
<p>In order to develop initialization and validation webhooks, you have to implement the methods &#8216;Default()&#8217;, &#8216;ValidateCreate()&#8217;, &#8216;ValidateUpdate()&#8217; and &#8216;ValidateDelete()&#8217;. Let&#8217;s take a look at a sample. The <a href="https://github.com/IBM/operator-sample-go" rel="noopener noreferrer" target="_blank">sample</a> is part of a GitHub repo that demonstrates various best practises for building operators.</p>
<p>The Default() function sets the default of the title property read from a Go variable (<a href="https://github.com/IBM/operator-sample-go/blob/a449303076310bc99e3595c1904e6aeb6ee03b87/operator-application/api/v1beta1/application_webhook.go#L28-L33" rel="noopener noreferrer" target="_blank">code</a>).</p>
<pre class="brush: plain; title: ; notranslate">
func (reconciler *Application) Default() {
  if reconciler.Spec.Title == &quot;&quot; {
    reconciler.Spec.Title = variables.DEFAULT_ANNOTATION_TITLE
  }
}
</pre>
<p>Here are some <a href="https://github.com/IBM/operator-sample-go/blob/a449303076310bc99e3595c1904e6aeb6ee03b87/operator-application/api/v1beta1/application_webhook.go#L38-L83" rel="noopener noreferrer" target="_blank">snippets</a> how to validate two properties.</p>
<pre class="brush: plain; title: ; notranslate">
func (reconciler *Application) ValidateCreate() error {
  return reconciler.validate()
}
func (reconciler *Application) ValidateUpdate(old runtime.Object) error {
  return reconciler.validate()
}
func (reconciler *Application) validate() error {
  var allErrors field.ErrorList
  if err := reconciler.validateSchemaUrl(); err != nil {
    allErrors = append(allErrors, err)
  }
  if err := reconciler.validateName(); err != nil {
    allErrors = append(allErrors, err)
  }
  if len(allErrors) == 0 {
    return nil
  }
    return apierrors.NewInvalid(
      schema.GroupKind{Group: GroupVersion.Group, Kind: reconciler.Kind},
      reconciler.Name, allErrors)
}
func (reconciler *Application) validateSchemaUrl() *field.Error {
  if !strings.HasPrefix(reconciler.Spec.SchemaUrl, &quot;http&quot;) {
    return field.Invalid(field.NewPath(&quot;spec&quot;).Child(&quot;schemaUrl&quot;), reconciler.Name, &quot;must start with 'http'&quot;)
  }
  return nil
}
func (reconciler *Application) validateName() *field.Error {
  // Note: Names of Kubernetes objects can only have a length is 63 characters
  // Note: Since deployment name = application name + ‘-deployment-microservice', the name cannot have more than 35 characters
  if len(reconciler.ObjectMeta.Name) &gt; validationutils.DNS1035LabelMaxLength-24 {
    return field.Invalid(field.NewPath(&quot;metadata&quot;).Child(&quot;name&quot;), reconciler.Name, &quot;must be no more than 35 characters&quot;)
  }
  return nil
}
</pre>
<p>To learn more read the <a href="https://book.kubebuilder.io/cronjob-tutorial/webhook-implementation.html" rel="noopener noreferrer" target="_blank">Kubebuilder documentation</a> and try the <a href="https://github.com/IBM/operator-sample-go" rel="noopener noreferrer" target="_blank">sample</a> operator which demonstrates defaulting/validation webhooks as well as many other operator patterns.</p>
<p>The post <a rel="nofollow" href="http://heidloff.net/article/developing-initialization-validation-webhooks-kubernetes-operators/">Initialization and Validation Webhooks in Operators</a> appeared first on <a rel="nofollow" href="http://heidloff.net">Niklas Heidloff</a>.</p>
]]></content:encoded><post-id xmlns="com-wordpress:feed-additions:1">4902</post-id></item></channel></rss>